---
title: "Introducci√≥n a R y RStudio"
subtitle: "Diplomatura Problemas Actuales de la Econom√≠a, el Empleo y el Comercio (CEPED - FCE - UBA)"
author-title: "DOCENTES:" 
authors:
  - name: Vladimiro S. Torres
  - name: Juan Camilo Gutman
output-file: "Clase 1 - Introducci√≥n a R y RStudio" 
format:
  html:
    embed-resources: true
    code-tools: false
    code-copy: false
    toc: true
    toc-location: left
    toc-title: √çndice
    theme:
      light: ../assets/teoria_claro.scss
      dark: ../assets/teoria_oscuro.scss
    fig-width: 8
    fig-height: 5
    fig-format: retina
    warning: false
    message: false
    echo: true
execute:
  freeze: auto
editor: source
include-after-body: ../assets/footer.html
---

:::: parallax-container
::: {#parallax-image .parallax-image-container .parallax-scroll data-image="imgs/R.jpg"}
:::
::::

```{=html}
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Get all parallax elements
  const parallaxElements = document.querySelectorAll('.parallax-image-container');
  
  parallaxElements.forEach(function(element) {
    // Set background image from data attribute
    const imagePath = element.getAttribute('data-image');
    if (imagePath) {
      element.style.backgroundImage = `url("${imagePath}")`;
    }
    
    // Set initial background position
    element.style.backgroundPosition = 'center -50px';
  });
  
  // Add scroll event listener
  window.addEventListener('scroll', function() {
    // Calculate viewport position
    const scrolled = window.pageYOffset;
    
    // Apply parallax effect to each element
    parallaxElements.forEach(function(element) {
      // Get the parallax container position
      const container = element.parentElement;
      const containerRect = container.getBoundingClientRect();
      const containerTop = containerRect.top + scrolled;
      
      // Calculate how far the container is from the top of viewport
      const distanceFromTop = containerTop - scrolled;
      
      // Only apply effect when container is in viewport
      if (distanceFromTop < window.innerHeight && distanceFromTop + containerRect.height > 0) {
        // Adjust the divisor (3) to control parallax intensity
        const yPos = -50 + (scrolled - containerTop) / 3;
        
        // Apply parallax effect
        element.style.backgroundPosition = `center ${yPos}px`;
      }
    });
  });
});
</script>
```

## ¬øQu√© es R?

R es un lenguaje de programaci√≥n y entorno de software libre que ha revolucionado el an√°lisis estad√≠stico y la visualizaci√≥n de datos. Desarrollado durante los a√±os 90 en la Universidad de Auckland (Nueva Zelanda), est√° inspirado en el lenguaje S creado en los a√±os 70, pero con una arquitectura orientada a la colaboraci√≥n cient√≠fica y acad√©mica.

En 1995, R fue lanzado como software de c√≥digo abierto, alcanzando su versi√≥n 1.0 en el a√±o 2000. Desde entonces, ha experimentado un crecimiento exponencial, consolid√°ndose como herramienta fundamental para profesionales e investigadores en m√∫ltiples disciplinas que requieren an√°lisis de datos robustos. Si quieren saber m√°s al respecto pueden llamar a la funci√≥n `contributors()`en la consola de R.

El Comprehensive R Archive Network (CRAN), fundado en 1997, constituye el repositorio principal de paquetes para R. Actualmente alberga m√°s de 22.000 paquetes que abarcan desde modelos estad√≠sticos tradicionales hasta implementaciones avanzadas de machine learning y sistemas de visualizaci√≥n de datos de alto rendimiento. CRAN garantiza la estabilidad y compatibilidad del ecosistema R, aunque su riguroso proceso de validaci√≥n ha dado lugar a pr√°cticas complementarias en la comunidad. Muchos desarrolladores publican versiones preliminares de sus paquetes en plataformas como GitHub, donde la comunidad puede examinarlos y contribuir a su mejora antes de su incorporaci√≥n oficial al repositorio CRAN.

```{r}
#| echo: false
#| purl: false

knitr::include_graphics("imgs/CRAN.png")
```

En 2011, la empresa Posit (antes RStudio) lanz√≥ RStudio, un entorno de desarrollo integrado que transform√≥ la accesibilidad y usabilidad de R. Su interfaz gr√°fica facilit√≥ la escritura de c√≥digo, la depuraci√≥n y la gesti√≥n de proyectos, consolid√°ndose como la herramienta est√°ndar para trabajar con R.

Un desarrollo clave en la evoluci√≥n de R ha sido el tidyverse, un conjunto de paquetes dise√±ados para simplificar la manipulaci√≥n y an√°lisis de datos. Creado por Hadley Wickham y su equipo en Posit, el tidyverse sigue principios de dise√±o coherentes, basados en el concepto de tidy data, donde cada columna es una variable y cada fila es una observaci√≥n.

Entre los paquetes m√°s destacados del tidyverse se encuentran:

-   {ggplot2} ‚Üí Visualizaci√≥n de datos.
-   {dplyr} ‚Üí Manipulaci√≥n y transformaci√≥n de datos.
-   {tidyr} ‚Üí Limpieza y estructuraci√≥n de datos.
-   {readr} ‚Üí Importaci√≥n de datos.
-   {purrr} ‚Üí Programaci√≥n funcional.
-   {tibble} ‚Üí Data frames mejorados.

Con el tiempo, el enfoque tidy ha ganado popularidad, inspirando otros paquetes como {tidymodels} (modelado estad√≠stico y machine learning), {tidytext} (an√°lisis de texto) y {tidygraph} (an√°lisis de redes). Este ecosistema ha desplazado en gran medida el enfoque base de R y se ha convertido en el est√°ndar en la comunidad de an√°lisis de datos.

A su vez, en los √∫ltimos a√±os R ha experimentado cambios tendientes a generar mayor interoperabilidad con Python, y expansi√≥n hacia tecnolog√≠as como Quarto.

### Diferencias con STATA y SPSS

-   Gratuito y de c√≥digo abierto
-   √önicamente funciona por l√≠neas de c√≥digo (No hay botones para ejecutar comandos)
-   Posibilita trabajar con m√∫ltiples bases de microdatos al mismo tiempo, sin mayor dificultad (No requiere abrir cada base, trabajarla por separado y luego cerrarla)
-   Totalmente automatizable
-   Extensible a otros lenguajes y usos (como esta presentaci√≥n)
-   Muy superior en capacidad de visualizaci√≥n
-   M√°s veloz

## Paneles

La interfaz de usuario de RStudio tiene 4 paneles principales:

-   **Panel de C√≥digo**

-   **Panel de Consola**

-   **Panel de Entorno**

-   **Panel de Salida**

```{r}
#| echo: false
#| purl: false

knitr::include_graphics("imgs/paneles.jpeg")
```

### Panel de C√≥digo

En el panel de c√≥digo es donde van a trabajar sobre los scripts. Se ubica normalmente en la parte superior izquierda.

Les permite, si quieren, abrir scripts en ventanas separadas, lo cual resulta √∫til para distribuir el trabajo entre m√∫ltiples monitores. Dicha funci√≥n se activa con el bot√≥n a la izquierda del √≠cono de guardado.


### Panel de Consola

Por defecto la consola se encuentra en la esquina inferior izquierda. Es aqu√≠ donde se ejectua el c√≥digo: pueden escribir en un script y mandarlo a la consola, o, ejecutarlo directamente all√≠.

Adem√°s, contiene una pesta√±a para correr comandos en la terminal del sistema operativo que sus computadoras.

### Panel de Entorno

Ubicado en la esquina superior derecha, este panel por defecto contiene las pesta√±as de **Entorno**, **Historial**, **Conexiones**. Las penta√±as **Git** y **Build** aparecen cuando uno trabaja con control de versiones con Git (c√≥mo aprenderemos al final de la diplomatura) y cuando uno est√° construyendo un paquete, respectivamente.

Aqu√≠ podr√°n observar los objetos de R actualmente guardados y accesibles su sesi√≥n de R.

### Panel de Salida

Lo ver√°n abajo y a la derecha. Contiene las pesta√±as de **Archivos**, **Gr√°ficos**, **Paquetes**, **Ayuda**, **Visor** y **Presentaci√≥n**.

La pesta√±a que m√°s nos interesar√° ser√° la de **Archivos** (el resto se activar√°n autom√°ticamente cuando, por ejemplo, creen y visualicen un gr√°fico). √âsta les proporcionar√° una exploraci√≥n interactiva del Proyecto R actual junto con todo el directorio. Encontrar√°n opciones para a√±adir nuevas carpetas, nuevos archivos en blanco, eliminar/renombrar archivos, as√≠ como un panel de configuraci√≥n (icono de engranaje) para funciones adicionales.

## L√≥gica sint√°ctica del lenguaje

### Definir objetos

La definici√≥n de objetos se realiza a trav√©s del operador `<-`. De este modo, es posible asignar la definici√≥n a un elemento:

```{r}
Y <- 1
```

Este operador tiene un atajo en el teclado: `Alt + -`

Al definir un elemento, el mismo queda guardado en el entorno del programa, y podr√° ser utilizado posteriormente para observar su contenido o para realizar una operaci√≥n con el mismo

```{r}
Y
```

El operador `=` es equivalente a `<-`, pero en la pr√°ctica no se utiliza para la definici√≥n de objetos.

```{r}
X = 2
X
```

El caracter **unidireccional** de `<-` implica que es posible redefinir objetos ya creados en el entorno de R, reemplaz√°ndolos por el contenido de otro. Por ejemplo:

```{r}
Y <- X
Y #En este caso Y fue redefinida con el contenido de X
```

### R Base

Con R base nos referimos a los comandos b√°sicos que vienen incorporados en el R, sin necesidad de cargar librer√≠as.

### Operadores l√≥gicos

-   `>` **Mayor**
-   `>=` **Mayor o igual**
-   `<` **Menor**
-   `<=` **Menor o igual**
-   `==` **Igual que**
-   `!=` **Distinto que**

```{r}
Y <- 1
X <- 2

Y > X
```

```{r}
Y >= X
```

```{r}
Y == X
```

```{r}
Y != X
```

```{r}
Z <- Y != X
Z
```

### Aritm√©tica

R funciona como calculadora. Hagamos unas operaciones de ejemplo:

```{r}
#suma

A <- 2+2
A
```

```{r}
#resta
B <- 10-5
B
```

```{r}
#cociente
C <- 15/3
C
```

```{r}
#multiplicaci√≥n
D <- 4*3
D
```

::: {.callout-note .callout-practice icon="false"}
## üõ†Ô∏è Momento de pr√°ctica

Les proponemos tomarnos 10' para hacer el ejercicio 1 de la gu√≠a pr√°ctica
:::

### Caracteres especiales

-   R es sensible a may√∫sculas y min√∫sculas, tanto para los nombres de las variables, como para las funciones y par√°metros.
-   Los **espacios en blanco** y los **carriage return** (los "enter") no son considerados por el lenguaje. Los podemos aprovechar para emprolijar el c√≥digo y que la lectura sea m√°s simple.
-   El numeral `#` se utiliza para hacer comentarios. Todo lo que se escribe despu√©s del `#` no es interpretado por R. Se debe utilizar un `#` por cada l√≠nea de c√≥digo que se desea anular
-   Los corchetes `[]` se utilizan para acceder a un objeto:
    -   en un vector \[n¬∞ orden\]
    -   en una matriz \[fila, columna\]
    -   en una lista \[n¬∞ elemento\]
-   El signo `$` tambi√©n es un m√©todo de acceso, que permite llamar al elemento por su nombre, en dataframes y listas.
-   Los par√©ntesis `()` se utilizan en las funciones para definir los par√°metros.
-   Las comas `,` se utilizan para separar los elementos.

### Objetos:

-   Valor
-   Vector
-   Matriz
-   Data Frame
-   Lista
-   Valores

### Valores

Los valores tienen distintos tipos:

**Numeric**

```{r}
A <- 1
class(A)
```

**character**

```{r}
A <- paste('Soy', 'una', 'concatenaci√≥n', 'de', 'caracteres', sep = " ")
class(A)
```

**factor**

```{r}
A <- factor("Soy un factor, con niveles fijos") 
class(A)
```

La diferencia entre un **character** y un **factor** es que el √∫ltimo tiene **solo algunos valores permitidos** (levels), y se le puede dar un orden.

**Date**

```{r}
A <- as.Date("2017-01-01")
class(A)
```

### Vectores

Para crear un **vector** utilizamos el comando `c()`, de combinar. Puede tener variables **de cualquier tipo**

```{r}
C <- c(1, 3, 4)
C
```

Tambi√©n, por ejemplo, se puede sumar 1 a cada elemento del vector anterior

```{r}
C <- C + 1
C
```

O, sumarle 1 al primer elemento, 2 al segundo, y 3 al tercer elemento del vector anterior

```{r}
D <- C + 1:3 #esto es equivalente a hacer 3+1, 5+2, 6+9 
D
```

`1:3` significa que queremos todos los n√∫meros enteros desde 1 hasta 3.

crear un **vector** que contenga las palabras: *Ingreso, Variaci√≥n, Indice*

```{r}
E <- c("Ingreso", "Variaci√≥n", "Indice")
```

para acceder a alg√∫n elemento del vector, podemos buscarlo por su n√∫mero de orden, entre `[]`

```{r}
elemento2 <- E[2]
elemento2
```

para borrar un objeto, utilizamos el comando `rm()`

```{r}
#| error: true

rm(elemento2)
elemento2
```

Tambi√©n podemos cambiar el texto del segundo elemento de E, por el texto ‚Äúvar‚Äù

```{r}
E[2] <- "var"
```

### Data Frames (DF)

Un Data Frame es una tabla de datos, donde cada columna representa una variable, y cada fila una observaci√≥n. Son el equivalente a las tablas de *STATA* y *SPSS*.

Este objeto suele ser central en el proceso de trabajo, y suele ser la forma en que se cargan datos externos, as√≠ como la mayor√≠a de los elementos intermedios, hasta aquello que exportemos.

Tambi√©n Se puede crear como la combinaci√≥n de N vectores de igual tama√±o. Por ejemplo, tomamos algunos valores de un [Indice de Salarios](https://www.indec.gob.ar/indec/web/Nivel4-Tema-4-31-61)

```{r}
INDICE  <- c(100,   100,   100,
             101.8, 101.2, 100.73,
             102.9, 102.4, 103.2)
FECHA  <-  c("Oct-16", "Oct-16", "Oct-16",
             "Nov-16", "Nov-16", "Nov-16",
             "Dic-16", "Dic-16", "Dic-16")
SECTOR  <-  c("Privado_Registrado","P√∫blico","Privado_No_Registrado",
             "Privado_Registrado","P√∫blico","Privado_No_Registrado",
             "Privado_Registrado","P√∫blico","Privado_No_Registrado")
             
Datos <- data.frame(INDICE, FECHA, SECTOR)
Datos
```

Notar que el nuevo objeto creado se encuentra dentro de la secci√≥n de **Data** en el interior de nuestro **entorno de R**. Tal como en un vector se ubica a los elementos mediante `[]`, en un dataframe se obtienen sus elementos de la forma \`\[fila, columna\]\`\`.

Otra opci√≥n es seleccionar la columna, mediante el operador `$`, y luego seleccionar dentro de esa columna, por el n√∫mero de orden.

```{r}
Datos$FECHA
```

```{r}
Datos[3,2]
```

*¬øque pasa si hacemos Datos\$FECHA\[3,2\]?*

```{r}
#| error: true

Datos$FECHA[3,2]
```

N√≥tese que el √∫ltimo comando tiene un n√∫mero incorrecto de dimensiones, porque estamos refiriendonos 2 veces a la columna FECHA.

### Listas

Contienen una concatenaci√≥n de objetos de cualquier tipo. As√≠ como un vector contiene valores, un dataframe contiene vectores, una lista puede contener dataframes, pero tambi√©n vectores, o valores, y todo ello a la vez

```{r}
lista1 <- list(A, B, C, D, E, FECHA, DF = Datos, INDICE, SECTOR)
lista1
```

Para acceder un elemento de una lista, podemos utilizar el operador \$, que se puede usar a su vez de forma iterativa

```{r}
lista1$DF$FECHA[2]
```

## Lectura y guardado: formatos existentes

R tiene formatos de archivos propios:

-   RDS
-   RData

Lo cierto es que les vamos a recomendar utilizar el formato RDS, en el cual se guarda un √∫nico objeto. Adem√°s, al momento de cargar el objeto en una nueva sesi√≥n de R pueden asignarlo al nombre de variable que necesiten/quieran.

### RDS

R trae por defecto algunas bases de datos listas para usar. Una de ellas son los resultados de un experimento acerca del efecto de dos somn√≠feros. √âsta fue usada como ejemplo por un qu√≠mico de la cervecer√≠a Guiness en un art√≠culo muy famoso donde introduce una distribuci√≥n de probabilidades hoy conocida como t de Student. William Gosset (ese era su verdadero nombre) la ten√≠a mucho m√°s dif√≠cil porque en 1908 todav√≠a no exist√≠an ni R ni RStudio.

```{r}
sleep
```

```{r}
#| eval: false

saveRDS(sleep, "sleep.rds")

# Cargamos para verificar
sleep_data <- readRDS("sleep.rds")
sleep_data
```

Los archivos de tipo RDS no guardan el nombre del objeto, lo cual es algo positivo. Podemos nombrarlos a gusto cuando los cargamos.

### Formatos no espec√≠ficos a R

Hay **muchas funciones** para leer archivos de tipo .txt y .csv. La mayor√≠a s√≥lo cambia los par√°metros que vienen por default.

Es importante tener en cuenta:

-   encabezado
-   delimitador (,, tab, ;)
-   separador decimal

```{{r}}
dataframe <- read.delim(file, header = TRUE, sep = "\t", quote = "\"", dec = ".", fill = TRUE, comment.char = "", ...) 
```

### Excel

Ejemplo: Levantar la base de SIPA con la que trabajaremos en la Clase 2

```{{r}}
#install.packages("openxlsx")
library(openxlsx)

base_sipa <- read.xlsx() #a definir
```

```{{r}}
#View(base_sipa)
names(base_sipa)
```

```{{r}}
head(base_sipa)[,1:5]
```

### .txt

Ejemplo de alguna

### SPSS, STATA, SAS

Podemos utilizar la librer√≠a haven, y los comandos:

-   read_spss()
-   read_dta()
-   read_sas()

### Encoding

Tanto a la hora de leer y escribir archivos, como al trabajar un mismo script desde distintas computadoras, debemos ser cuidadosos con el encoding seteado. El encoding es el sistema mediante el cual el sistema interpreta los caracteres del lenguaje natural. Hay muchos encodings diferentes, que interpretan distinto algunos caracteres, como tildes y signos de puntuaci√≥n. Por ende, si el encoding seteado no es el mismo que el de nuestro script/tabla pueden generarse errores. En medida de lo posible, al escribir nuestros scripts es recomendable evitar estos caracteres.

R tiene por default el encoding **‚ÄúISO-8859-1‚Äù**, sin embargo el m√°s habitual en Am√©rica Latina es ‚ÄúUTF-8‚Äù.

-   Lectura de archivos : Aglunas de las funciones del tipo read_table, read_xlsx permiten establecer como uno de sus parametros el encoding deseado
-   Encoding utilizado para abrir un script:File -\> Reopen with Encoding
-   Encoding default con el que se guardan nuestros Scripts: Tools -\> Global Options -\> Code -\> Saving

## Organizaci√≥n scripts

Por √∫ltimo, es aconsejable mantener en todos los script una misma estructura del tipo:

1.  Limpiar la memoria rm(list=ls())
2.  Cargar librer√≠as
3.  Definir directorios
4.  Definir funciones
5.  Levantar archivos ‚Ä¶ procesamiento ‚Ä¶.

<!-- -->

n.  grabar resultados

Tambi√©n es √∫til organizar las partes del script en cap√≠tulos. Para eso

`### escribimos el t√≠tulo del capitulo encerrado entre tres o m√°s numerales ###`

## Diferencia entre proyectos y scripts

### Scripts:

Los scripts en R son archivos de texto (.R) que permiten estructurar el c√≥digo de manera modular, una hoja donde se escribe c√≥digo. Esto significa que cada segmento del an√°lisis, o cada tarea espec√≠fica, se puede desarrollar de forma independiente, facilitando la confecci√≥n, organizaci√≥n y la reutilizaci√≥n del c√≥digo. Adem√°s, esta estructura modular confiere una gran flexibilidad, ya que permite ejecutar o modificar bloques de c√≥digo sin necesidad de reestructurar todo el proyecto, lo cual es ideal para realizar experimentos r√°pidos o pruebas puntuales. Sumado a esto, el uso de scripts posibilita documentar detalladamente cada paso del proceso, lo que resulta de gran ayuda para la depuraci√≥n y para revisar el trabajo hecho.

### Proyectos R:

Un proyecto en R es, esencialmente, un contenedor que agrupa todos los elementos necesarios para desarrollar un an√°lisis o una aplicaci√≥n, tales como el c√≥digo, los datos, los resultados y las configuraciones espec√≠ficas. Al abrir un proyecto, se establece autom√°ticamente el directorio de trabajo y se cargan los ajustes predefinidos, lo que facilita el uso de rutas relativas (en ingl√©s, *relative paths*) sin importar la ubicaci√≥n de la carpeta del proyecto.

Esta estructura organizada mejora la reproducibilidad y la colaboraci√≥n, ya que permite compartir el trabajo o trasladarlo a diferentes computadoras sin que pierda coherencia. Adem√°s, los proyectos gestionan la integraci√≥n con Git, un aspecto que profundizaremos en las √∫ltimas clases de la diplomatura.

La forma t√≠pica de comenzar a trabajar en R es haciendo doble clic en el archivo `.Rproj`. Tambi√©n es posible (y muy c√≥modo) acceder a los proyectos abiertos recientemente desde la esquina superior derecha de la interfaz.

### Su uso conjunto:

Les recomendamos trabajar con un `.Rproj` (un proyecto) para cada an√°lisis o trabajo. Al hacerlo, se centraliza la configuraci√≥n del entorno, las rutas de acceso y dem√°s ajustes, lo que garantiza uniformidad durante todo el proceso. Sobre esa base, se recomienda dividir el c√≥digo en diferentes scripts, asignando a cada uno tareas espec√≠ficas ‚Äîpor ejemplo, uno para la limpieza de datos, otro para el an√°lisis exploratorio y un tercero para la generaci√≥n de gr√°ficos‚Äî. Esta separaci√≥n no solo simplifica el mantenimiento y la reutilizaci√≥n del c√≥digo, sino que tambi√©n mejora la colaboraci√≥n en equipo, permitiendo que cada colaborador se familiarice r√°pidamente con la estructura y el flujo de trabajo.

## Para la clase 2

En la misma carpeta en la encontraron esta presentaci√≥n hay una gu√≠a pr√°ctica. All√≠ van a encontrar ejercicios de diferente dificultad, sus respuestas, y nuestras recomendaciones. Si terminaron los ejercicios y quieren profundizar en sus conocimientos un poco m√°s, tambi√©n les dejamos un archivo con extras.

## Referencias {.unnumbered}

```{=html}
<div id="refs" class="references csl-bib-body hanging-indent">
  <div id="ref-r-core" class="csl-entry">
    R Core Team. (2024). <i>R: A Language and Environment for Statistical Computing</i>. R Foundation for Statistical Computing, Vienna, Austria. Recuperado de <a href="https://www.R-project.org/">https://www.R-project.org/</a>
  </div>
  
  <div id="ref-rstudio-guide" class="csl-entry">
    Posit Team. (2025). <i>RStudio IDE User Guide</i>. Posit Software, PBC. Recuperado de <a href="https://docs.posit.co/ide/user/">https://docs.posit.co/ide/user/</a>
  </div>
  
  <div id="ref-student1908" class="csl-entry">
    Student [pseu. William Sealy Gosset]. (1908). <i>The probable error of a mean</i>. <i>Biometrika</i>, <b>6</b>(1), 1‚Äì25.
  </div>
</div>
```
