---
title: "Clase 3 - Manipulación de bases de datos II"
subtitle: "Diplomatura Problemas Actuales de la Economía, el Empleo y el Comercio (CEPED - FCE - UBA)"
author-title: "DOCENTES:" 
authors:
  - name: Vladimiro S. Torres
  - name: Juan Camilo Gutman
output-file: "Clase 3 - Manipulación de bases de datos II" 
format:
  html:
    embed-resources: true
    code-tools: false
    code-copy: false
    toc: true
    toc-location: left
    theme: 
      light: ../assets/practica_claro.scss
      dark: ../assets/practica_oscuro.scss
    fig-width: 8
    fig-height: 5
    fig-format: retina
    warning: false
    message: false
    echo: true
execute:
  freeze: auto
editor: source
include-after-body: ../assets/footer.html
---

En esta clase vamos a ver...

```{r}
library(tidyverse)
library(readxl)
library(lubridate)      # Para manejar fechas
library(plotly)         # Interactive plots
```

```{r}
#| echo: false

library(gt)             # Para mostrar las tablas mejor
```

## Complejizar tidyverse

Hasta el momento se ha avanzado sobre funciones que componen el paquete `tidyverse` en forma individual, pero no hemos observado esquemas que concatenen estas funciones en un **flujo de trabajo más complejos**. Este tipo de esquemas, o procesos, tienden a ser el trabajo más típico de un usuario/a en R, ya que para sintetizar grandes volumenes de información en indicadores o métricas, se requieren procesos previos sobre los datos.

### El operador pipe (%\>%) como conector fundamental

Este instrumento o herramienta es fundamental para los flujos de trabajo, ya que es el operador a través del cual se concatenan las operaciones u ordenes que están codificadas. Su esencia se encuentra en la posibilidad de realizar múltiples operaciones, de forma secuencial y velozmente, al mismo tiempo que dicho conjunto de operaciones quedan escritas en una secuencia de código. Se trata únicamente de una transformación sintáctica: nos permite ordenar el código

## Flujo de trabajo y base de datos

En esta clase abarcaremos el análisis y la práctica de flujos más complejos con `tidyverse`, a partir del uso de una base de datos de SIPA. Para ello, se procederá a importar dicha base y contar con ella en el ambiente de R.

```{r}
SIPA <- read_csv("bases/base_sipa.csv", 
                 show_col_types = FALSE) # Convert Periodo to proper date format immediately
```

Un típico control, a penas se importa una base de trabajo, es analizar la clase de la variable donde se indica la fecha o la periodicidad de la información. En muchos casos puede suceder que esta no sea interpretada por R como un variable de tipo fecha, sino de otra naturaleza.

```{r}
class(SIPA$Periodo)

SIPA <- SIPA %>% 
  mutate(Periodo = as.Date(Periodo))

class(SIPA$Periodo)
  
```

En este caso se revisó la clase de la variable, y se la modificó de modo tal que R interprete su contenido como una fecha. A partir de aquí, se procede a explorar la base de datos.

### Explorar la base

En primer lugar, se puede observar con que variables cuenta la base.

```{r}
names(SIPA)
```

Así, dado que una columna se llama "Variable", puede observarse al interior de esta qué etiquetas aparecen y cuál la frecuencia de cada una de estas.

```{r}
table(SIPA$Variable)
```

De este modo, es posible incluir una variable de defina el año de cada observación, a fin de obtener datos que den cuenta de una frecuencia anual y no solo mensual.

```{r}
SIPA <- SIPA %>% 
  mutate(Anio = year(Periodo))
```

La función `year()` forma parte del paquete `lubridate`, el cual es de gran utilidad para trabajar con el formato fecha de variables al interior de una base de datos. El input para `year()` es una variable de clase fecha de nuestro data set, y su output es el año al cual corresponde el input. Al mismo tiempo, como puede verse, dicha fecha se utiliza al interior de la función `mutate()`, la cual como ya se ha visto opera creando variables nuevas o reescribiendo las ya existentes en caso de indicar el mismo nombre.

Por tanto, el comando puede leerse cómo: creese una variable llamada `Anio` que tenga por contenido el año de cada uno de las fechas al interior de la variable `Periodo`. Así, R irá fila por fila tomando como input el contenido de la variable `Perìodo` y devolviendo como output el año al cual corresponde cada uno de los valores al interior de `Periodo`.

Una vez que se cuenta con la variable `Anio`, se procederá a estudiar diferentes cálculos posibles.

### Primera concatenación: desde el group_by()

Un primer procesamiento de utilidad refiere a la utilización de la función `group_by()`, la cual permite "iterar" algún proceso lógico para todos los valores que toma alguna variable de nuestro dataset. Por ejemplo:

```{r}
flujo1 <- SIPA %>% 
 group_by(Anio, Variable) %>% 
 summarise(Promedio = mean(Valor))

flujo1

```

En este caso, el objetivo está en agrupar un procesamiento determinado para cada valor que tomen las columnas `Anio` y `Variable`. El procesamiento en cuestión es calcular el promedio del contenido de la columna `Valor`.

Por ende, el código puede leerse como: creese la columna `Promedio`, la cual debe contener el promedio del contenido de la columna `Valor` para cada combinación de `Anio` y `Variable`.

Este tipo de cálculos generales, también pueden especificarse para algún valor, o rango de valores, de las variables para las cuales se hace el agrupamiento (en este caso `Anio` y `Variable`). Por ejemplo, acotemos el cálculo solo para una de las categorías dentro de `Variables`.

```{r}
flujo2 <- SIPA %>%
  filter(Variable == "Empleo asalariado en el sector privado") %>% 
  group_by(Anio) %>% 
  summarise(Promedio = mean(Valor))

flujo2
```

En este caso, se incluye un filtro para `Variable`, el cual busca acotar el cálculo para todos los casos contenidos en la categoría *"Empleo asalariado en el sector privado"*.

Por lo tanto, el código puede leerse como: calculese el promedio de la columna `Valor`, para todo el conjunto de datos que compartan el mismo valor de la columna `Anio`, pero solo para la categorìa *"Empleo asalariado en el sector privado"* de la columna `Variable`.

A su vez, es importante señalar que en este tipo de procesamientos, R ordena las filas desde el valor más bajo al más alto de la primera columna, por defecto. Sin embargo, el orden puede modificarse al especificar un orden particular con la función `arrange()`. Por ejemplo:

```{r}
flujo3 <- SIPA %>%
  filter(Variable == "Empleo en casas particulares") %>% 
  group_by(Anio) %>% 
  summarise(Promedio = mean(Valor)) %>% 
  arrange(-Anio)

flujo3

```

En este caso, se repite el procesamiento previo, pero luego de estimar el promedio se ordena a las filas desde el mayor valor de la variable `Año` al menor. Notar que esto es así porque se especificó un `-` delante del nombre de la variable al interior de la función `arrange()`, en caso de no incluir este signo el orden irá del menor valor al mayor.

Un procesamiento aledaño a lo previo, en busca de manipular el tiempo con otro nivel de periodicidad, sería repetir los procesamientos bajo frecuencias mensuales o trimestrales. La creación de dichas variables de tiempo, sigue una lógica idéntica a la vista para la variable anio, pero con sus funciones correspondientes.

```{r}
SIPA <- SIPA %>% 
  mutate(Mes = month(Periodo),
         Trimestre = quarter(Periodo))
```

### Segunda concatenación: left_join()

Un proceso cotidiano con bases de datos es el de pegarlas o unirlas. En este caso, en busca de trabajar con precios y arribar a medidas de ingreso real, pegaremos una base de precios a nuestra base de SIPA. Para ello, se requiere contar con dicha información en nuestro ambiente de R. Veamos entonces cómo se importa una base con dicha información, y como luego podemos hacer un `join` con nuestra base de SIPA.

```{r}
ipc_mensual <- read_xlsx("../clase2/bases/ipc_ceped_data.xlsx")

class(ipc_mensual$fecha)

ipc_mensual <- ipc_mensual %>% 
  mutate(fecha = as.Date(fecha))

class(ipc_mensual$fecha)
```

Notar que fue necesario revisa nuevamente la clase de la variable fecha. Si bien esto puede resultar reiterativo, es un procedimiento muy tìpico en el manejo cotidiano de bases de datos.

Ahora bien, para poder unir dos dataset, necesitamos que ambos cuenten con un **denominador común**, algo que opere como polo de atracción entre ambos objetos. En este caso, y muchas veces, dicho denominador común será la fecha. 

Antes de pegar ambas bases, nos quedaremos únicamente con la parte del dataset de SIPA donde yacen las remuneraciones medias (sin estacionalidad). Además, crearemos un número índice a partir de la serie de remuneraciones promedio.

```{r}
remuneracion_media <- SIPA %>% 
  filter(Variable == "Remuneración promedio - sin estacionalidad") %>% 
  mutate(indice_remuneraciones = Valor/Valor[Periodo == "2009-01-01"]*100)
```

Creamos también una variable con el número indice de precios de igual base que para los ingresos (base 100 = ene-2009).

```{r}
ipc_mensual <- ipc_mensual %>% 
  mutate(indice_ipc_2009 = valor/valor[fecha == "2009-01-01"]*100)
```

Con dichas variables creadas, **pero sobre todo con el mismo formato de fecha para ambas bases de datos**, procedemos a unir las bases.

```{r}
#| eval: false

remuneracion_real <- remuneracion_media %>%
  left_join(ipc_mensual, by = c("Periodo" = "fecha"))
```

Notar que el objeto creado es un objeto distinto, el cual resulta del pegado de las dos bases: `remuneracion_media` e `ipc_mensual`. En particular, la lógica sintáctica de la operación se puede leer de la siguiente manera: creese el objeto `remuneracion_con_ipc`, tomando `remuneracion_media` y aplicandole el operador `left_join()` para unirlo con el objeto `ipc_mensual`. Hágase dicha operación mediante la concatenación de la variable `Periodo` del data set `remuneracion_media`, de la variable `fecha` de la base `ipc_mensual`, cuyo contenido es equivalente. 

Una vez comprendida la operación, lo valioso de contar con ingresos y precios expresados en números indices, es que estos pueden dividirse para obtener un número indice que exprese la evolución del ingreso real.

```{r}
remuneracion_real <- remuneracion_real %>% 
  mutate(indice_real = indice_remuneraciones/indice_ipc_2009*100,
         Trimestre        = quarter(Periodo)) %>% 
  select(Periodo, Anio = ANO4, Trimestre, Mes = sub, indice_real) 
```

En este caso, además de crear la variable `indice_real`, se crea la variable trimestre, donde también se suma la función `select()` en busca de limpiar el data set de las variables que fue acumulando. Así, l base de datos queda conformada por 5 variables: `Periodo, Anio, Trimestre, Mes, indice_real`.

Por último, antes de arribar a la introducción a la visualización, se estimarán promedios anuales del salario a fin de de poder comparar unos con otros, calcular variaciones interanuales, y exportar un excel con la información elaborada.

```{r}
remuneracion_real_anual <- remuneracion_real %>% 
  group_by(Anio) %>% 
  summarise(Promedio_Anual = mean(indice_real),
            Variacion = (Promedio_Anual/lag(Promedio_Anual, 1))-1)
```



## ggplot

Graficar la serie real

Tomar series en niveles, pasarlas a logs y después visualizar

Mirar boxplots

gráficos de densidad

Al final mostrar por encima el HTML que hizo Vladi para EPH

### Recursos adicionales

Para quienes quieran profundizar en estos conceptos:

#### R y Tidyverse

-   Wickham, H., & Grolemund, G. (2023). *R for Data Science (2nd ed)*. O'Reilly Media. <https://r4ds.hadley.nz/>

## Bibliografía {.unnumbered}

```{=html}
<div id="refs" class="references csl-bib-body hanging-indent">

  <div id="ref-wickham2019" class="csl-entry">
    Wickham, H., &amp; Grolemund, G. (2023). <i>R for Data Science (2nd ed)</i>. O'Reilly Media.
  </div>

  <div id="ref-tidyverse2023" class="csl-entry">
    Tidyverse. (2023, April). <i>Base vs. magrittr pipe</i>. Recuperado de <a href="https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/">https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/</a>
  </div>

  <div id="ref-dataviz" class="csl-entry">
    DataViz Inspiration. (n.d.). RetrievedRecuperado de <a href="https://www.dataviz-inspiration.com/">https://www.dataviz-inspiration.com/</a>
  </div>

</div>
```
