---
title: "Clase 3 - Manipulación de bases de datos II"
subtitle: "Diplomatura Problemas Actuales de la Economía, el Empleo y el Comercio (CEPED - FCE - UBA)"
author-title: "DOCENTES:" 
authors:
  - name: Vladimiro S. Torres
  - name: Juan Camilo Gutman
output-file: "Clase 3 - Manipulacion de bases de datos II" 
format:
  html:
    embed-resources: true
    code-tools: false
    code-copy: false
    toc: true
    toc-location: left
    theme: 
      light: ../assets/practica_claro.scss
      dark: ../assets/practica_oscuro.scss
    fig-width: 8
    fig-height: 5
    fig-format: retina
    warning: false
    message: false
    echo: true
execute:
  freeze: auto
editor: source
include-after-body: ../assets/footer.html
---

```{r}
library(tidyverse)
library(readxl)
library(lubridate)      # Para manejar fechas
library(plotly)         # Gráficos interactivos
```

```{r}
#| echo: false

library(gt)             # Para mostrar las tablas mejor
```

## Complejizar tidyverse

Hasta el momento se ha avanzado sobre funciones que componen el paquete `tidyverse` en forma individual, pero no hemos observado esquemas que concatenen estas funciones en un **flujo de trabajo más complejo**. Este tipo de esquemas, o procesos, tienden a ser el trabajo más típico de un usuario/a en R, ya que para sintetizar grandes volumenes de información en indicadores o métricas, se requieren procesos previos sobre los datos.

### El operador pipe (%\>%) como conector fundamental

Este instrumento o herramienta es fundamental para los flujos de trabajo, ya que es el operador a través del cual se concatenan las operaciones u ordenes que se codifican. Su esencia se encuentra en la posibilidad de realizar múltiples operaciones, de forma secuencial y velozmente, al mismo tiempo que dicho conjunto de operaciones quedan escritas en una secuencia de código. Se trata únicamente de una transformación sintáctica: nos permite ordenar el código.

## Flujo de trabajo y base de datos

En esta clase abarcaremos el análisis y la práctica de flujos más complejos con `tidyverse`, a partir del uso de una base de datos de SIPA. Para ello, se procederá a importar dicha base para contar con ella en el ambiente de R.

```{r}
SIPA <- read_csv("bases/base_sipa.csv", 
                 show_col_types = FALSE)
```

Un típico control, a penas se importa una base de trabajo, es analizar la clase de la variable donde se indica la fecha o la periodicidad de la información. En muchos casos puede suceder que esta no sea interpretada por R como un variable de tipo fecha, sino de otra naturaleza.

```{r}
class(SIPA$Periodo)

SIPA <- SIPA %>% 
  mutate(Periodo = as.Date(Periodo))

class(SIPA$Periodo)
  
```

En este caso se revisó la clase de la variable, y se la modificó de modo tal que R interprete su contenido como una fecha. A partir de aquí, se procede a explorar la base de datos.

### Explorar una base

En primer lugar, se puede observar con que variables cuenta la base. Para ello, se utilizará la función `names()`, la cual nos devuelve el nombre que toma cada una de las variables o columnas dentro de la base. 

```{r}
names(SIPA)
```

Así, dado que una columna se llama "Variable", puede observarse al interior de esta qué etiquetas aparecen y cuál la frecuencia de cada una de estas. Para ello se empleará la función `table()`, la cual devuelve el número de veces que se repite un contenido único de la variable: es decir, la frecuencia del contenido de esta. 

```{r}
table(SIPA$Variable)
```
Es importante aclarar que **la función `table()` cobra relevancia ante variables cuyo contenido sea cateórico o discreto**, ya que **cuando se analiza una variable continua (ingresos, precios, números índices) resulta más útil observar métricas que den cuenta de la distribución de la variable (máximo, mínimo, promedio, mediana, etcétera)**.

Nota: ver, por ejemplo, la función `summary()` para el caso de variables continuas. 

De este modo, es posible incluir una variable que defina el año de cada observación, a fin de obtener datos que den cuenta de una frecuencia anual y no solo mensual.

```{r}
SIPA <- SIPA %>% 
  mutate(Anio = year(Periodo))
```

La función `year()` forma parte del paquete `lubridate`, el cual es de gran utilidad para trabajar con el formato fecha de variables al interior de una base de datos. El input para `year()` es una variable de clase fecha de nuestro data set, y su output es el año al cual corresponde el input. Al mismo tiempo, como puede verse, dicha fecha se utiliza al interior de la función `mutate()`, la cual como ya se ha visto opera creando variables nuevas o reescribiendo las ya existentes en caso de indicar el mismo nombre.

Por tanto, el comando puede leerse cómo: creese una variable llamada `Anio` que tenga por contenido el año de cada uno de las fechas al interior de la variable `Periodo`. Así, R irá fila por fila tomando como input el contenido de la variable `Periodo` y devolviendo como output el año al cual corresponde cada uno de los valores al interior de `Periodo`.

Una vez que se cuenta con la variable `Anio`, se procederá a estudiar diferentes cálculos posibles.

### Primera concatenación: desde el group_by()

Un primer procesamiento de utilidad refiere a la utilización de la función `group_by()`, la cual permite "iterar" algún proceso lógico para todos los valores que toma alguna variable de nuestro dataset. Por ejemplo:

```{r}
flujo1 <- SIPA %>% 
 group_by(Anio, Variable) %>% 
 summarise(Promedio = mean(Valor))

flujo1
```

En este caso, el objetivo está en agrupar un procesamiento determinado para cada valor que tomen las columnas `Anio` y `Variable`. El procesamiento en cuestión es calcular el promedio del contenido de la columna `Valor`.

Por ende, el código puede leerse como: creese la columna `Promedio`, la cual debe contener el promedio del contenido de la columna `Valor` para cada combinación de `Anio` y `Variable`.

Este tipo de cálculos generales, también pueden especificarse para algún valor, o rango de valores, de las variables para las cuales se hace el agrupamiento (en este caso `Anio` y `Variable`). Por ejemplo, acotemos el cálculo solo para una de las categorías dentro de `Variables`.

```{r}
flujo2 <- SIPA %>%
  filter(Variable == "Empleo asalariado en el sector privado") %>% 
  group_by(Anio) %>% 
  summarise(Promedio = mean(Valor))

flujo2
```

En este caso, se incluye un filtro para `Variable`, el cual busca acotar el cálculo para todos los casos contenidos en la categoría *"Empleo asalariado en el sector privado"*.

Por lo tanto, el código puede leerse como: calcúlese el promedio de la columna `Valor`, para todo el conjunto de datos que compartan el mismo valor de la columna `Anio`, pero solo para la categorìa *"Empleo asalariado en el sector privado"* de la columna `Variable`.

A su vez, es importante señalar que en este tipo de procesamientos, R ordena las filas desde el valor más bajo al más alto de la primera columna, por defecto. Sin embargo, el orden puede modificarse al especificar un orden particular con la función `arrange()`. Por ejemplo:

```{r}
flujo3 <- SIPA %>%
  filter(Variable == "Empleo en casas particulares") %>% 
  group_by(Anio) %>% 
  summarise(Promedio = mean(Valor)) %>% 
  arrange(-Anio)

flujo3
```

En este caso, se repite el procesamiento previo, pero luego de estimar el promedio se ordena a las filas desde el mayor valor de la variable `Año` al menor. Notar que esto es así porque se especificó un `-` delante del nombre de la variable al interior de la función `arrange()`, en caso de no incluir este signo el orden irá del menor valor al mayor.

Un procesamiento aledaño a lo previo, en busca de manipular el tiempo con otro nivel de periodicidad, sería repetir los procesamientos bajo frecuencias mensuales o trimestrales. La creación de dichas variables de tiempo, sigue una lógica idéntica a la vista para la variable anio, pero con sus funciones correspondientes.

```{r}
SIPA <- SIPA %>% 
  mutate(Mes = month(Periodo),
         Trimestre = quarter(Periodo))
```

### Segunda concatenación: left_join()

Un proceso cotidiano con bases de datos es el de pegarlas o unirlas. En este caso, en busca de trabajar con precios y arribar a medidas de ingreso real, pegaremos una base de precios a nuestra base de SIPA. Para ello, se requiere contar con dicha información en nuestro ambiente de R. Veamos entonces cómo se importa una base con dicha información, y como luego podemos hacer un `join` con nuestra base de SIPA.

```{r}
ipc_mensual <- read_xlsx("../clase2/bases/ipc_ceped_data.xlsx")

class(ipc_mensual$fecha)

ipc_mensual <- ipc_mensual %>% 
  mutate(fecha = as.Date(fecha))

class(ipc_mensual$fecha)
```

Notar que fue necesario revisa nuevamente la clase de la variable fecha. Si bien esto puede resultar reiterativo, es un procedimiento muy típico en el manejo cotidiano de bases de datos.

Ahora bien, para poder unir dos dataset, necesitamos que ambos cuenten con un **denominador común**, algo que opere como polo de atracción entre ambos objetos. En este caso, y muchas veces, dicho denominador común será la fecha.

Antes de pegar ambas bases, nos quedaremos únicamente con la parte del dataset de SIPA donde yacen las remuneraciones medias (sin estacionalidad). Además, crearemos un número índice a partir de la serie de remuneraciones promedio.

```{r}
remuneracion_media <- SIPA %>% 
  filter(Variable == "Remuneración promedio - sin estacionalidad") %>% 
  mutate(indice_remuneraciones = Valor/Valor[Periodo == "2009-01-01"]*100)
```

Creamos también una variable con el número indice de precios de igual base que para los ingresos (base 100 = ene-2009).

```{r}
ipc_mensual <- ipc_mensual %>% 
  mutate(indice_ipc_2009 = valor/valor[fecha == "2009-01-01"]*100)
```

Con dichas variables creadas, **pero sobre todo con el mismo formato de fecha para ambas bases de datos**, procedemos a unir las bases.

```{r}
remuneracion_real <- remuneracion_media %>%
  left_join(ipc_mensual, by = c("Periodo" = "fecha"))
```

Notar que el objeto creado es un objeto distinto, el cual resulta del pegado de las dos bases: `remuneracion_media` e `ipc_mensual`. En particular, la lógica sintáctica de la operación se puede leer de la siguiente manera: creese el objeto `remuneracion_con_ipc`, tomando `remuneracion_media` y aplicandole el operador `left_join()` para unirlo con el objeto `ipc_mensual`. Hágase dicha operación mediante la concatenación de la variable `Periodo` del data set `remuneracion_media`, de la variable `fecha` de la base `ipc_mensual`, cuyo contenido es equivalente.

Una vez comprendida la operación, lo valioso de contar con ingresos y precios expresados en números indices, es que estos pueden dividirse para obtener un número indice que exprese la evolución del ingreso real.

```{r}
remuneracion_real <- remuneracion_real %>% 
  mutate(indice_real = indice_remuneraciones/indice_ipc_2009*100,
         Trimestre        = quarter(Periodo)) %>% 
  select(Periodo, Anio = ANO4, Trimestre, Mes = sub, indice_real) 
```

En este caso, además de crear la variable `indice_real`, se crea la variable trimestre, donde también se suma la función `select()` en busca de limpiar el data set de las variables que fue acumulando. Así, l base de datos queda conformada por 5 variables: `Periodo, Anio, Trimestre, Mes, indice_real`.

Por último, antes de arribar a la introducción a la visualización, se estimarán promedios anuales del salario a fin de de poder comparar unos con otros, calcular variaciones interanuales, y exportar un excel con la información elaborada.

```{r}
remuneracion_real_anual <- remuneracion_real %>% 
  group_by(Anio) %>% 
  summarise(Promedio_Anual = mean(indice_real))
```

Ahora añadimos la variable de `Variacion`, a partir de dividir la variable creada sobre ella misma pero con un `lag()` y restándole la unidad.

```{r}
remuneracion_real_anual <- remuneracion_real_anual %>% 
  mutate(Variacion = Promedio_Anual/lag(Promedio_Anual)-1)
```

Notar que en este caso las variaciones quedan escritas como decimales, para anotar estas en formato porcentaje pueden multiplicarse los valores por 100 dentro del cómputo, e incluso puede pedirse que solo muestre dos decimales. A saber:

```{r}
remuneracion_real_anual <- remuneracion_real_anual %>% 
  mutate(Variacion = round((Promedio_Anual/lag(Promedio_Anual)-1)*100, digits = 2))
```


Aquí, la función `round()` es la que indica acotar la cantidad de decimales, y el parametro `digits = 2` luego del cien y la coma quien señala la cantidad de decimales a estimar.

Por último procedemos a exportar en formato Excel nuestro objeto `remuneracion_real_anual` del ambiente de R.

```{r}
#| eval: false

write_excel_csv(remuneracion_real_anual, "Remuneración Real Anual 2009-2024.xlsx")
```

## Introducción a la visualización

Una parte importante del uso de R consiste en las herramientas de visualización que este provee. Para ello, a partir de aquí trabajaremos sobre la librería `ggplot`. la cual forma parte del entorno `tidyverse` y su uso se encuentra ampliamente difundido entre la comunidad de usuarios/as de R.

Para comenzar, además de analizar a la estructura de la lógica sintáctica, trabajaremos sobre un concepto central de `ggplot` que es la asignaciòn de atributos estéticos a los valores que toma una determinada variable. Dicho de otra forma, como mostrar de modo perceptible a la vista la diferencia entre valores: generalmente lo hacemos describiendo posiciones de un valor x y un valor y, pero también puedo definir un tamaño, una forma, o un color.

![](imagen_1.png){width="50%"}

`ggplot` tiene su sintaxis propia. La idea central es pensar los gráficos como una sucesión de capas, que se construyen una a la vez.

¿Cómo funciona esto en la práctica?

-   El comando `ggplot()` nos permite definir los **datos** y las **variables** (x,y,color,forma,etc).

-   El operador `+` nos permite incorporar nuevas capas al gráfico.

-   Las sucesivas capas nos permiten definir:

-   Uno o más tipos de gráficos (de columnas, `geom_col()`, de línea, `geom_line()`, de puntos,`geom_point()`, boxplot, `geom_boxplot()`).

-   Títulos `labs()`.

-   Estilo del gráfico `theme()`.

-   Escalas de los ejes `scale_y_continuous`, `scale_x_discrete`.

-   División en subconjuntos `facet_wrap()`, `facet_grid()`.

ggplot tiene muchos comandos, y no tiene sentido saberlos de memoria, es siempre útil reutilizar gráficos viejos y tener a mano el [machete](https://posit.co/).

Usaremos el paquete de R [ggplot2](https://ggplot2.tidyverse.org/), que incluye funciones para realizar una gran variedad de visualizaciones.

```{r}
library(ggplot2)
```

A modo de ejemplo, y para mostrar una base de datos diferente con datos intuitivos, utilizaremos bases de la temperatura diaria de [kaggle](https://www.kaggle.com/sudalairajkumar/daily-temperature-of-major-cities) para Argentina y México. Específicamente para Buenos Aires y tres ciudades de México (Guadalajara, México DF y Monterrey).

```{r}
temp_arg <- read.csv("bases/city_temperature_arg.csv") 
#hay que filtrar las bases por que tienen datos mising computados como -99

temp_mex <- read.csv("bases/city_temperature_mex.csv")

temp_arg <- temp_arg %>% 
 mutate(Month = as.factor(Month))
temp_mex <- temp_mex %>% 
 mutate(Month = as.factor(Month))
```

Una vez cargadas dichas bases, se procede a analizar la variable temperatura de cada una de ellas para ver si sus valores se comportan normalmente. 

```{r}
summary(temp_arg$temp_prom)
summary(temp_mex$temp_prom)
```
Se observa que existen valores -99, los cuales muy probablemente corresponden a missing data, es decir a valores NA. Por tanto, se procede a filtrar por valores mayores que cero, de modo tal de tener información con valores realmente observados.

```{r}
temp_arg <- temp_arg %>% 
  filter(temp_prom > 0)

temp_mex <- temp_mex %>% 
  filter(temp_prom > 0)
```

Una vez realizado esto, podemos avanzar con la visualización. Si por ejemplo le pasamos un dataframe a ggplot(), sin agregar nada más, obtenemos un gráfico vacío:

```{r}
ggplot(temp_arg)
```

Esto es porque necesitamos definir al menos una geometría (el recurso visual con el que vamos a mostrar la información, como líneas, puntos, barras, etc.) y al menos una asignación estética (especificar cuales variables queremos mostrar, y que atributo estético va a representar sus valores, como el color, el tamaño, la transparencia, etc.).

`ggplot()` implementa un marco teórico para la creación de visualizaciones, “la gramática de los gráficos”. Ésta permite expresar en forma concisa los componentes de un gráfico:

![](imagen_2.png){width="50%"}

Si se asigna la variable `Month` a la posición en el eje de las `x`, la variable `temp_prom` a las `y`, y se añade `geom_point()` para mostrar los datos, se puede obtener el siguiente gráfico:

```{r}
ggplot(temp_arg, aes(x = Month, y = temp_prom)) +
  geom_point()
```

A su vez, si se agrupa por la variable `Month` la información, y se core la misma estructura de código pero modificando el tipo de gráfico por `geom_boxplot()`, obtenemos un gráfico de cajas (o velas) donde puede observarse la distribución al interior de cada uno de los mesese registrados en la base. 

```{r}
ggplot(temp_arg, aes(x = Month, y = temp_prom)) +
  geom_boxplot()
```

Ahora crearemos dentro de cada base la variable `day_of_year`, a fin de tener un indentificador que nos permita agrupar por el dìa del año.

```{r}
temp_arg <- temp_arg %>% 
  mutate(day_of_year = yday(paste(Year, Month, Day, sep = "-")))

temp_mex <- temp_mex %>% 
  mutate(day_of_year = yday(paste(Year, Month, Day, sep = "-")))

```

En este caso se utilizó la función `yday()` del paquete `lubridate`, la cual nos devuelve a que día del año corresponde una fecha. Por ejemplo, el 18 de abril de 2025 es el dìa 108 del año. Para comprobar esto, corra en la consola el siguiente comando: 
`yday("2025-04-18")`.

A su vez, al interior de la función `yday()`, se pegó con la función `paste()` el dato de año, mes y día, separados por un guión, a fin de que tome la informaciòn de cada año, mes y día para devolver el número del día del año correspondiente.

Con dicha información, se crea un nuevo flujo de trabajo (flujo4), donde se estima el promedio diario de la temperatura agrupado por el dìa del año correspondiente. Es decir, toma todos los primeros días de cada año y hace un promedio, luego los segundos, luego los terceros, y asì hasta el dìa 366 en los años que corresponda. Dicha información es posible representarla con una linea, ya que hay un solo valor para cada uno de los días del año, el valor que resulta del promedio de muchos años diferentes.

```{r}
flujo4 <- temp_arg %>% 
  group_by(day_of_year) %>% 
  summarise(promedio_dia = mean(temp_prom))

ggplot(flujo4, aes(x = day_of_year, y = promedio_dia)) +
  geom_line()

```

### Incluir el color

Ahora, si se toma la base correspondiente al clima en México, esta contiene información sobre tres ciudades distintas. Por tanto, en términos de analizar visualmente su información, resultaría más útil poder observar la data de cada ciudad por separado. 

```{r}
flujo5 <- temp_mex %>% 
  group_by(City, day_of_year) %>% 
  summarise(promedio_dia = mean(temp_prom))

ggplot(flujo5, aes(x = day_of_year, y = promedio_dia, color = City)) +
  geom_line()
```
Notar que el atributo estético `color` permite diferenciar por color alguna variable que se requiera utilizar, en este caso `City`.
En cambio, usando `City` como variable del eje y, y `Temperatura` dentro de color, puede verse un especie de heat map pero dentro de una sola lìnea. En este caso se utiliza `geom_point()` ya que con `geom_line()` el ancho es demasiado acotado como para percibir las diferencias de color.

```{r}
flujo6 <- flujo5 %>% 
  rename(Temperatura = promedio_dia)

ggplot(flujo6, aes(x = day_of_year, y = City, color = Temperatura)) +
  geom_point()
```

### Atributo estético `fill`

Algunas geoms permiten usar el atributo estético `fill`, que es similar `color` pero se aplica como relleno, **pintando por dentro áreas como las barras de un gráfico o las regiones en un mapa** (color, en cambio, se usa para líneas y puntos). Por ejemplo, podemos usar el atributo estético fill con geom_boxplot() para pintar el interior de cada caja. 

```{r}
ggplot(temp_mex, aes(x = Month, y = temp_prom, fill = City)) +
  geom_boxplot()
```

Lo interesante de observar gráficos de cajas, en vez de líneas de promedios, es que puede observarse la distribución de temperaturas para un mismo mes y una misma ciudad, lo cual brinda una visión mucho más abarcativa que un promedio. Tener en cuenta que un promedio es altamente sensible a los valores extremos, no así la mediana, por tanto la métrica que se utilice para presentar los datos también forma parte del herramental que un usuario/a tiene a disposición y debe tomar en consideración. 

### Titular, mostrar fuentes, definir nombres de ejes y definir estética.

El ejercicio de visualizar información no solo requiere de un apropiado herramental visual, sino también de la capcidad de titular, subtitular, indicar fuentes y ejes de forma correcta y concisa. En este caso, veremos cómo agregar dicha información a nuestros gráficos.

Si retomamos desde nuestro objeto de `remuneración_real`, la forma gráfica más apropaida para graficar los niveles corresponde a lineas, dado que estas pueden interpretarse como `series de tiempo`.

```{r}
remuneracion_real %>% 
  ggplot(aes(x = Periodo, y = indice_real)) +
  geom_line()
```

Para añadir todo lo referido a títulos, subtítulos, fuente y títulos de eje, se recurrirá al comando `labs()`. Si se requiere más información de la que se proveerá a continuación sobre este atributo, es posible apretar F1 posicionándose sobre `labs()`, correr en la consola el comando `?labs()`, o visitar la [sección de referencia de labs() de ggplot2](https://ggplot2.tidyverse.org/reference/labs.html]).

```{r}
remuneracion_real %>% 
  ggplot(aes(x = Periodo, y = indice_real)) +
  geom_line() +
  labs(title = "Remuneración Real Asal. Reg. del Sec. Privado",
       subtitle = "Total País. Sin estacionalidad.",
       y = "Nivel",
       x = "", #de este modo no aparece el nombre de la variable X
       caption = "Fuente: Sistema Integrado Previsional Argentino (SIPA)") 
```

Al mismo tiempo, en busca de cambiar atributos estéticos y de diseño, se buscará definir el color de la linea, el ancho, y el tipo de trama del fondo. Para ello se emplearán parámetros al interior de `geom_line()`, así como la definición de una estética con el atributo `theme_clasic()`. Además de existir una gran cantidad de estéticas para definir, las cuales pueden observarse [aquí](https://ggplot2.tidyverse.org/reference/ggtheme.html), también hay una amplia [paleta de colores](https://r-charts.com/es/colores/) con la que R cuenta.


```{r}
remuneracion_real %>% 
  ggplot(aes(x = Periodo, y = indice_real)) +
  geom_line(color = "#104E8B", size = 1) +
  theme_classic() +
  labs(title = "Remuneración Real Asal. Reg. del Sec. Privado",
       subtitle = "Total País. Sin estacionalidad.",
       y = "Nivel",
       x = "", #de este modo no aparece el nombre de la variable X
       caption = "Fuente: Sistema Integrado Previsional Argentino (SIPA)") 
```

En la próxima clase, se avanzará sobre un formato más complejo de este mismo gráfico, para luego proceder a mostrar otros tipos de gráficos, así como información vinculada a la distribución y la densidad.


### Recursos adicionales

Para quienes quieran profundizar en estos conceptos:

#### R y Tidyverse

-   Wickham, H., & Grolemund, G. (2023). *R for Data Science (2nd ed)*. O'Reilly Media. <https://r4ds.hadley.nz/> (para quienes necesiten una versión en español está disponible la traducción de la primera edición en este enlace: <https://es.r4ds.hadley.nz/>)


## Bibliografía {.unnumbered}

```{=html}
<div id="refs" class="references csl-bib-body hanging-indent">

  <div id="ref-wickham2019" class="csl-entry">
    Wickham, H., &amp; Grolemund, G. (2023). <i>R for Data Science (2nd ed)</i>. O'Reilly Media.
  </div>

  <div id="ref-tidyverse2023" class="csl-entry">
    Tidyverse. (2023, April). <i>Base vs. magrittr pipe</i>. Recuperado de <a href="https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/">https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/</a>
  </div>

  <div id="ref-dataviz" class="csl-entry">
    DataViz Inspiration. (n.d.). RetrievedRecuperado de <a href="https://www.dataviz-inspiration.com/">https://www.dataviz-inspiration.com/</a>
  </div>

</div>
```
