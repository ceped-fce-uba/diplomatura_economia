---
title: "Clase 4 - Visualización de Datos Avanzada"
subtitle: "Diplomatura Problemas Actuales de la Economía, el Empleo y el Comercio (CEPED - FCE - UBA)"
author-title: "DOCENTES:" 
authors:
  - name: Vladimiro S. Torres
  - name: Juan Camilo Gutman
output-file: "Clase 4 - Visualizacion de Datos Avanzada" 
format:
  html:
    embed-resources: true
    code-tools: false
    code-copy: false
    toc: true
    toc-location: left
    theme: 
      light: ../assets/practica_claro.scss
      dark: ../assets/practica_oscuro.scss
    fig-width: 8
    fig-height: 5
    fig-format: retina
    warning: false
    message: false
    echo: true
execute:
  freeze: auto
editor: source
include-after-body: ../assets/footer.html
---

```{r}
library(tidyverse)
library(readxl)
library(lubridate)      # Para manejar fechas
library(plotly)         # Interactive plots
library(ggthemes)
```

```{r}
#| echo: false
#| purl: false

library(gt)
options(scipen=999)
```

# Complejizar la visualización

En este última clase se avanzará sobre la complejización de la visualización de datos en R, entendiendo que las principales fortalezas de ello se encuentra en la posibilidad de automatizar complejas visualizaciones sobre un conjunto no menor de datos. A su vez, el entorno de R permite explorar cambios drásticos sobre la visualización, vinculados al formato y la geometría del dato visualizado, tan solo con acotadas líneas de código.

En una primera instancia se avanzará sobre la visualización más compleja de series, así como de puntos, para luego avanzar en la visualización de frecuencias, distribuciones y densidad.

## Visualizar Series

Explicar los cambios entre el último gráfico de salario real y este 

```{r}
library(tidyverse)

SIPA <- read_csv("bases/base_sipa.csv", 
                 show_col_types = FALSE)

SIPA <- SIPA %>% 
  mutate(Periodo = as.Date(Periodo),
         Anio = year(Periodo),
         Mes = month(Periodo),
         Trimestre = quarter(Periodo))
```


```{r}
ipc_mensual <- read_xlsx("../clase2/bases/ipc_ceped_data.xlsx")

class(ipc_mensual$fecha)

ipc_mensual <- ipc_mensual %>% 
  mutate(fecha = as.Date(fecha))

class(ipc_mensual$fecha)
```

```{r}
remuneracion_media <- SIPA %>% 
  filter(Variable == "Remuneración promedio - sin estacionalidad") %>% 
  mutate(indice_remuneraciones = Valor/Valor[Periodo == "2009-01-01"]*100)

ipc_mensual <- ipc_mensual %>% 
  mutate(indice_ipc_2009 = valor/valor[fecha == "2009-01-01"]*100)

remuneracion_real <- remuneracion_media %>%
  left_join(ipc_mensual, by = c("Periodo" = "fecha"))

remuneracion_real <- remuneracion_real %>% 
  mutate(indice_real = indice_remuneraciones/indice_ipc_2009*100,
         Trimestre        = quarter(Periodo)) %>% 
  select(Periodo, Anio = ANO4, Trimestre, Mes = sub, indice_real) 

```

```{r}
#PROBANDO

library(plotly)
library(htmlwidgets)

plot_remun <- remuneracion_real %>%
  filter(year(Periodo) >= 2019) %>%
  ggplot(aes(x = Periodo, y = indice_real)) +
  geom_line(color = 'steelblue', size = 1) +
  geom_point(color = 'steelblue', size = 2.5) +
  scale_x_date(date_breaks = "2 month",
               date_labels = "%b %Y") +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45,
                                  hjust = 1)
        ) +
  labs(title = "Remuneración Real Asal. Reg. del Sec. Privado",
       subtitle = "Total País. Sin estacionalidad.",
       y = "Nivel",
       x = "", 
       caption = "Fuente: Sistema Integrado Previsional Argentino (SIPA)")
  

plotly_remun <- plot_remun %>%
  ggplotly()

htmlwidgets::saveWidget(plotly_remun, "remuneracion_desde_2019.html")

plotly_remun
```



::: {.panel-tabset}
## ggplot2

este esta re bueno, pero esta lleno de pruebas, definí una y mandale 

```{r}

# Leer los datos
expo_mineras <- read_csv("bases/expo_mineras_por_grupo.csv")

ggplot(expo_mineras, aes(x = anio, y = expo_grupo, fill = grupo_nuevo)) +
  # bordes finos para distinguir los grupos
  geom_area(color = "white", size = 0.1, alpha = 0.85) +
  
  # paleta de colores
  scale_fill_tableau() +

  labs(
    title = "Exportaciones mineras argentinas por grupo de minerales (1994-2022)",
    x = "Año",
    y = "Miles de millones USD",
    fill = "Mineral"
  ) -> graf_expo_mine

graf_expo_mine

# muy avanzado, pero...
# capaz meterle:

# + theme_fivethirtyeight() 

# y 
# library(scales)      # Para formateo de etiquetas
# 
#   scale_y_continuous(
#     labels = function(x) paste0("$", x, "B"),
#     expand = c(0, 0)
#   ) +
# 
#   scale_x_continuous(
#     breaks = seq(1994, 2022, by = 4),
#     expand = c(0, 0)
#   ) +


# y, tal vez:

 # %>%
 #  # Ordenar los minerales por valor total para mejor visualización
 #  group_by(grupo_nuevo) %>%
 #  mutate(total = sum(expo_grupo)) %>%
 #  ungroup() %>%
 #  mutate(grupo_nuevo = fct_reorder(grupo_nuevo, total, .desc = TRUE))

# clave...

# library(scales)  # Para funciones de formato avanzadas
# 
# # Función para formato de millones con punto como separador de miles
# # pero no vimos funciones...
#
# formato_millones <- function(x) {
#   # Reemplaza coma con punto como separador de miles y agrega símbolo "$" y "M"
#   paste0("$ ", format(x, big.mark = ".", decimal.mark = ","), " M")
# }
# 
#   # Formato personalizado para el eje Y
#   scale_y_continuous(
#     labels = formato_millones,
#     # Asegurar que las divisiones de la escala sean números enteros
#     breaks = function(x) pretty(x, n = 6)
#   ) +

```

## ggplotly

Una sola línea de código y ya lo hacemos interactivo:

```{r}
ggplotly(graf_expo_mine)
```


Agroindustria

Columnas acostadas

```{r}
importancia_agro <- read_csv("bases/importancia_agro.csv")

importancia_agro <- importancia_agro %>%
  filter(pais %in% c("Bolivia", "Paraguay", "Ecuador", "Uruguay", 
                     "Colombia", "Argentina", "China", "Perú", 
                     "Brasil", "Mundo", "México", "Chile"))

importancia_agro <- importancia_agro %>%
  arrange(desc(va_agro_sobre_pbi))

# Creamos columna para destacar Argentina
importancia_agro <- importancia_agro %>%
  mutate(es_argentina = ifelse(pais == "Argentina", "Sí", "No"))

ggplot(importancia_agro, 
         aes(x = reorder(pais, va_agro_sobre_pbi), 
             y = va_agro_sobre_pbi,
             fill = es_argentina)) +
    # Añadimos las barras
    geom_bar(stat = "identity") +
    # Configuramos colores (Argentina en celeste, otros en naranja)
    scale_fill_manual(values = c("No" = "#FF8C00", "Sí" = "#87CEEB")) +
    # Añadimos etiquetas con los porcentajes
    geom_text(aes(label = paste0(format(va_agro_sobre_pbi, decimal.mark = ",", nsmall = 1), "%")),
              hjust = -0.2, size = 3.5) +
    # Invertimos el eje para que se vea como el gráfico original de Fundar
    coord_flip() +
    # sin esto no se veía la etiqueta de Bolivia por ejemplo
    scale_y_continuous(limits = c(0, 14),
                       breaks = seq(2, 14, by = 2),
                       labels = function(x) paste0(x, "%")) +
    # Añadimos títulos y subtítulos
    labs(title = "Importancia del agro y la pesca en Argentina y otros países",
         subtitle = "PIB del agro y la pesca como porcentaje del PIB total, en países seleccionados (en porcentaje), 2021",
         caption = "Fuente de datos: Banco Mundial.\nNota: los datos están en precios corrientes.",
         x = NULL,
         y = NULL)
```

Gráfico de barras apiladas y de líneas de varios países

```{r}
# con datos de agroindustria: https://argendata.fund.ar/topico/agroindustria/
```


Personalización

Esto quizá mejor al final, que les quede de material de consulta, quizá con alguna mención a la librería scales y la de ggthemes.

![Machete de estilos de ggplot2 por Isabella Benabaye](imgs/ggplot2-theme-elements.png)


Retomar con la siguiente data ya procesada supongo que graficos de lineas con varios numeros indice como el de Graña o alguna otra evolución.

## Visualizar Puntos

Acá se puede ver la clase 2 de la diplo de UNSAM

## Visualizar Composición

Acá creo que ya tenías cosas, pero no se



## Visualizar la Dispersión y las Diferencias

Para avanzar sobre medidas vinculadas a la dispersión y las diferencias, se hará uso de la [base de datos](https://www.indec.gob.ar/indec/web/Institucional-Indec-BasesDeDatos-9) proveniente de la [Encuesta Nacional de Uso del Tiempo (ENUT)](https://www.indec.gob.ar/indec/web/Nivel4-Tema-4-31-117).

Entre octubre y diciembre de 2021, el INDEC realizó la Encuesta Nacional de Uso del Tiempo, que busca caracterizar la vida de personas de distintas edades y el tiempo que le dedican a las actividades que realizan dentro y fuera de los hogares. El relevamiento se llevó a cabo en 28.520 viviendas seleccionadas de áreas urbanas de todo el país.

Por tanto, se procede a levantar la base de datos correspondiente a la encuesta:

```{r}
enut <- read.table("bases/enut2021_base.txt",
                  header = TRUE,
                  sep = "|",
                  dec = ".")
```

Notar que el tipo de base es `.txr`, un formato no utilizado hasta el momento, pero muy habitual en las bases de datos provistas por el INDEC. En este sentido, un formato distinto requiere funciones distintas, para este caso se utilizó la función `read.table()`. Al mismo tiempo, es muy importante notar que este tipo de formatos no tienen estandarizados el tipo de separado entre una variable u otra, ni el signo de puntuación que diferencia el entero del decimal. Es por ello que se requiere utilizar los parámetros de la función para indicarle a R que signo separa una variable de otra y cuál el entero del decimal.

De este modo, `header = TRUE` nos indica que R muestre el título de cada columna (nombre de variable), `sep = "|` es una indicación para que R interprete que el signo | separa una variable de otra (en otros casos podría ser una coma o un punto y coma), y por último `dec = "."` hace referencia a que las variables numéricas se separan entre enteros y decimales mediante puntos.

Ahora si, se procede a visualizar la información de la encuesta. Para trabajar con ella, siempre es recomendable contar con el [Diccionario de Registros](https://www.indec.gob.ar/ftp/cuadros/menusuperior/enut/enut2021_diccionario_registros.xlsx), el cual nos indicara a qué corresponde cada nombre de variable y que tipo de contenido yacen en estas.

En dicha exploración, puede encontrarse, por ejemplo, que la variable `TIPO_HOGAR_DTOTAL` refleja la tipología de hogar según demandante de cuidado: 0 para hogares sin personas demandantes de cuidado, 1 para aquellos hogares donde hay al menos un demandante de cuidado.

```{r}
ggplot(enut, aes())
```


## Visualizar la distribución, la densidad y las frecuencias




### Complejización de la distribución: graficos de violin vs. boxplot


gráficos de densidad: enut

```{r}
#| eval: FALSE

enut
```


### Recursos adicionales

Para quienes quieran profundizar en estos conceptos:

#### ggplot2

-   QCBS R Workshop Series (2023). *Workshop 3: Introduction to data visualisation with ggplot2*. <https://r.qcbs.ca/workshop03/book-en/>

## Bibliografía {.unnumbered}

```{=html}
<div id="refs" class="references csl-bib-body hanging-indent">

  <div id="ref-wickham2019" class="csl-entry">
    Wickham, H., &amp; Grolemund, G. (2023). <i>R for Data Science (2nd ed)</i>. O'Reilly Media.
  </div>

  <div id="ref-dataviz" class="csl-entry">
    DataViz Inspiration. (n.d.). RetrievedRecuperado de <a href="https://www.dataviz-inspiration.com/">https://www.dataviz-inspiration.com/</a>
  </div>

</div>
```
