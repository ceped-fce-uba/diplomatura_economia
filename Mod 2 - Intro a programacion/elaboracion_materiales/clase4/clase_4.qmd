---
title: "Clase 4 - Visualización de Datos Avanzada"
subtitle: "Diplomatura Problemas Actuales de la Economía, el Empleo y el Comercio (CEPED - FCE - UBA)"
author-title: "DOCENTES:" 
authors:
  - name: Vladimiro S. Torres
  - name: Juan Camilo Gutman
output-file: "Clase 4 - Visualizacion de Datos Avanzada" 
format:
  html:
    embed-resources: true
    code-tools: false
    code-copy: false
    toc: true
    toc-location: left
    theme: 
      light: ../assets/practica_claro.scss
      dark: ../assets/practica_oscuro.scss
    fig-width: 8
    fig-height: 5
    fig-format: retina
    warning: false
    message: false
    echo: true
execute:
  freeze: auto
editor: source
include-after-body: ../assets/footer.html
---

```{r}
#| echo: false
#| purl: false

library(tidyverse)
library(readxl)
library(lubridate)      # Para manejar fechas
library(plotly)         # Interactive plots
library(ggthemes)
library(gt)

options(scipen=999)
```

# Complejizar la visualización

En este última clase se avanzará sobre la complejización de la visualización de datos en R, entendiendo que las principales fortalezas de ello se encuentra en la posibilidad de automatizar complejas visualizaciones sobre un conjunto no menor de datos. A su vez, el entorno de R permite explorar cambios drásticos sobre la visualización, vinculados al formato y la geometría del dato visualizado, tan solo con acotadas líneas de código.

En una primera instancia se avanzará sobre la visualización más compleja de series, así como de puntos, para luego avanzar en la visualización de frecuencias, distribuciones y densidad.

## Visualizar Series

Sobre el final de la última clase trabajamos sobre la visualización del salario real. En dicho proceso, se buscó visualizar una serie de tiempo del ingreso real, incluyendo capas vinculadas a la información (títulos, fuente, etc) y estética o trama del gráfico (un `theme`).

```{r}
#| warning: FALSE

library(tidyverse)

SIPA <- read_csv("bases/base_sipa.csv", show_col_types = FALSE)
ipc_mensual <- read_xlsx("../clase2/bases/ipc_ceped_data.xlsx")

SIPA <- SIPA %>% 
  mutate(Periodo = as.Date(Periodo),
         Anio = year(Periodo),
         Mes = month(Periodo),
         Trimestre = quarter(Periodo))

ipc_mensual <- ipc_mensual %>% 
  mutate(fecha = as.Date(fecha))

remuneracion_media <- SIPA %>% 
  filter(Variable == "Remuneración promedio - sin estacionalidad") %>% 
  mutate(indice_remuneraciones = Valor/Valor[Periodo == "2009-01-01"]*100)

ipc_mensual <- ipc_mensual %>% 
  mutate(indice_ipc_2009 = valor/valor[fecha == "2009-01-01"]*100)

remuneracion_real <- remuneracion_media %>%
  left_join(ipc_mensual, by = c("Periodo" = "fecha"))

remuneracion_real <- remuneracion_real %>% 
  mutate(indice_real = indice_remuneraciones/indice_ipc_2009*100,
         Trimestre        = quarter(Periodo)) %>% 
  select(Periodo, Anio = ANO4, Trimestre, Mes = sub, indice_real) 

graf_remun <- remuneracion_real %>% 
  ggplot(aes(x = Periodo, y = indice_real)) +
  geom_line(color = "#104E8B", size = 1) +
  theme_classic() +
  labs(title = "Remuneración Real Asal. Reg. del Sec. Privado",
       subtitle = "Total País. Sin estacionalidad. (ene-2009 = 100)",
       y = "",
       x = "",
       caption = "Fuente: Sistema Integrado Previsional Argentino (SIPA)")

graf_remun
```

Ahora vamos a (literalmente) sumar capas de complejidad a nuestro gráfico original. Para empezar, utilizará el paquete `ggthemes`, el cual incluye una gran variedad de estilos/temas.

```{r}
library(ggthemes)

graf_remun <- graf_remun +
  theme_fivethirtyeight() 

graf_remun
```

En términos de la estética del fondo, R también permite agregar marcas contextuales. Por ejemplo, una línea discontinua horizontal y otra punteada, vertical. Esto puede lograrse agregando capas geométricas que indiquen una línea, es decir, las funciones `geom_hline()` y `geom_vline()`.

```{r}
graf_remun <- graf_remun +
  
  geom_hline(yintercept = 100, linetype = "dashed", color = "gray50", size = 0.8) +
  
  geom_vline(xintercept = as.Date("2020-03-20"), linetype = "dotted", color = "red", size = 0.7)

graf_remun
```

Notar que al interior de estas se incluyen los parámetros de coordenadas, colores, tipo de linea y tamaño.

En una versión más compleja de esto, es posible incluir anotaciones en el gráfico. Lo más complicado es dar las coordenadas exactas, pero R permite una operatividad muy rápida al poder visualizar el gráfico e ir hacinedo diferentes pruebas hasta encontrar la combinación más útil.

```{r}
graf_remun <- graf_remun +
  annotate("text", x = as.Date("2020-03-20"), y = max(remuneracion_real$indice_real, na.rm = TRUE), 
         label = "Inicio Pandemia", hjust = -0.1, vjust = 7, size = 3)

graf_remun
```

A su vez, también es posible ajustar los llamados "ticks" (o marcas de graduación) de los ejes. Éstos son pequeñas marcas en los ejes (vertical u horizontal) que sirven de referencia para los valores del gráfico. Las funciones de ajuste más usadas son `scale_x_continuos()` o `scale_y_continuos()` pero que son algo más confusas. Empecemos por algo simple:

```{r}
graf_remun <- graf_remun +
scale_x_date(date_breaks = "1 year", date_labels = "%Y")

graf_remun
```

Una costumbre estética es voltear las etiquetas de las marcas de graduación a 45°, muy útil cuando se tiene datos para una período largo de tiempo. Para ello, se utiliza el atributo `theme()`.

```{r}
graf_remun <- graf_remun +
  theme(axis.text.x = element_text(angle = 45,
                                  hjust = 1)
        )
  
graf_remun
```

Como último atributo para añadir al gráfico de salario real, es posible añadir áreas sombreadas para destacar períodos específicos. Esto es ampliamente utilizado para indicar años de recesión dentro de visualizaciones de series sobre actividad o empleo.

```{r}
graf_remun <- graf_remun +
  
annotate("rect", 
       xmin = as.Date("2015-09-01"), xmax = as.Date("2020-02-01"),
       ymin = -Inf, ymax = Inf, 
       fill = "#8B3A3A", alpha = 0.2) +
  
annotate("text", x = as.Date("2017-12-10"), y = max(remuneracion_real$indice_real, na.rm = TRUE), 
         label = "Retroceso previo a la pandemia", vjust = 0, size = 3)

graf_remun
```

## Visualizar Puntos

Ahora bien, para avanzar en el conocimiento sobre visualización, se procederá a abordar la visualización de puntos en forma más completa. En la práctica de la clase anterior se construó el siguiente gráfico:

```{r}
library(gapminder)  
library(ggplot2)    

gapminder_2007 <- gapminder %>% filter(year == 2007)

ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp)) +
  geom_point() +  
  labs(
    title = "Esperanza de vida vs. PBI per Capita (2007)",
    x = "PBI per Capita (en escala logarítmica)",
    y = "Esperanza de vida (en años)"
  ) +
  scale_x_log10() +  # Escala logarítmica para el PBI
  theme_classic()
```

A continuación se complejizará sobre este gráfico, y la visualización de puntos en general, pero antes algunos comentarios en torno a las transformaciones o escalas logarítmicas.

-   Distancias iguales representan multiplicaciones iguales, no sumas iguales:
-   En una escala logarítmica base 10, el espacio entre cada potencia de 10 (1, 10, 100, 1000, etc.) es visualmente idéntico.
-   En nuestro caso, por ejemplo, la diferencia entre 300 y 1.000 ocupa el mismo espacio que entre 3.000 y 10.000

En definitva la búsqueda por transformar a logaritmos algunas de las visualizaciones que pueden encontrarse es acotar las enormes distancias que pueden tener los niveles no logarítmicos.

En el siguiente gráfico se visualizará la experiencia de vida vinculada al PBI per cápita (en escala logarítmica), donde los colores nos permitirán diferenciar entre continentes, y los tamaños entre el volumen de población de cada nación. Esto último no es trivial, ya que si dos países poseen un mismo PBI per cápita pero uno posee la mitad de población que el otro, el país de mayor población posee un PBI considerablemente mayor.

```{r}
ggplot(gapminder_2007, aes(x = gdpPercap, y = lifeExp, 
                          size = pop, color = continent)) +
  geom_point(alpha = 0.7) +  # Puntos con transparencia, clave por la superposición
  scale_x_log10() +  # Escala logarítmica para GDP per capita
  labs(
    title = "Esperanza de vida vs. PBI per Capita (2007)",
    x = "PBI per Capita (en escala logarítmica)",
    y = "Esperanza de vida (en años)",
    color = "Continente"
  ) +
  theme_classic()
```

## Visualizar Composición

Así como se trabajó sobre la gráfica de series y la de puntos, una herramienta de gran poder en la visualización es la composición, dado que esta permite observar como se componen las piezas de un todo. Para ello, se recurrirá a los gráficos de barras apiladas.

### Gráficos de áreas apiladas

En este caso, se trabajará sobre una base con información de la exportación minera argentina. ACA INDICAR ALGO MÁS SOBRE ESTA BASE, ALGÚN LINK, ALGO!

Previo a la visualización propiamente dicha, se realiza un breve procesamiento donde se crea la variable `total`, agrupando por grupo mineral.

```{r}

# Leer los datos
expo_mineras <- read_csv("bases/expo_mineras_por_grupo.csv")


expo_mineras <- expo_mineras %>% 
  group_by(grupo_nuevo) %>%
  mutate(total = sum(expo_grupo)) %>%
  ungroup() %>%
  mutate(grupo_nuevo = fct_reorder(grupo_nuevo, total, .desc = TRUE))

ggplot(expo_mineras, aes(x = anio, y = expo_grupo, fill = grupo_nuevo)) +
  # bordes finos para distinguir los grupos
  geom_area(color = "white", size = 0.1, alpha = 0.85) +
  
  # paleta de colores
  scale_fill_tableau() +
  
    scale_y_continuous(
    labels = function(x) paste0("$", x / 1000000, "M"),
    expand = c(0, 0)
  ) +

  scale_x_continuous(
    breaks = seq(1994, 2022, by = 4),
    expand = c(0, 0)
  ) +

  labs(
    title = "Exportaciones mineras argentinas por grupo de minerales (1994-2022)",
    x = "Año",
    y = "Miles de millones USD",
    fill = "Mineral"
  ) -> graf_expo_mine_area # Esta forma de asignar puede que también se la encuentren

graf_expo_mine_area

```

Al mismo tiempo, si se utiliza la función `ggplotly()`, con una sola línea de código es posible volver interactiva a la visualización.

```{r}
library(plotly)

ggplotly(graf_expo_mine_area)
```

Es importante destacar que el mundo de las visualizaciones interactivas es amplio, y `plotly` configura en un universo en si mismo, por tanto hay mucho más para indagar en dicha herramienta que lo aquí expuesto. Además, no siempre funciona bien `ggplotly()` para traducir de una librería a otra, pero siempre se pueden buscar en Google los errores que surjan al intentar volver interactiva una visualización.

### Gráficos de barras apiladas

Alternativamente, los mismos datos vistos antes podríamos haberlos visualizado con barras apiladas:

```{r}
ggplot(expo_mineras, aes(x = anio, y = expo_grupo, fill = grupo_nuevo)) +
  # Usamos geom_col() en lugar de geom_area() para crear barras apiladas
  geom_col(color = "white", size = 0.1, alpha = 0.85) +
  
  # Mantenemos la misma paleta de colores
  scale_fill_tableau() +
  
  scale_y_continuous(
    labels = function(x) paste0("$", x / 1000000, "M"),
    expand = c(0, 0)
  ) +
  scale_x_continuous(
    breaks = seq(1994, 2022, by = 4),
    expand = c(0, 0)
  ) +
  labs(
    title = "Exportaciones mineras argentinas por grupo de minerales (1994-2022)",
    x = "Año",
    y = "Miles de millones USD",
    fill = "Mineral"
  ) -> graf_expo_mine_barras

graf_expo_mine_barras
```
Y es igualmente fácil añadirle interactividad:

```{r}
ggplotly(graf_expo_mine_barras)
```
Por último, si quieren exportar el gráfico interactivo en formato HTML para compartirlo por sí solo o para integrarlo en una página web o blog, hacerlo es muy sencillo:

```{r}
library(htmlwidgets)

mine_interac_area <- ggplotly(graf_expo_mine_barras)

htmlwidgets::saveWidget(mine_interac_area, "exportaciones_mineras.html")
```


## Visualizar la Frecuencia

Para avanzar sobre medidas vinculadas a la dispersión y las diferencias, se hará uso de la [base de datos](https://www.indec.gob.ar/indec/web/Institucional-Indec-BasesDeDatos) proveniente de la [Encuesta Permanente de Hogares (EPH)](https://www.indec.gob.ar/indec/web/Nivel4-Tema-4-31-60).

La Encuesta Permanente de Hogares (EPH) es un programa nacional de producción sistemática y permanente de indicadores sociales que lleva a cabo el Instituto Nacional de Estadística y Censos (INDEC), que permite conocer las características sociodemográficas y socioeconómicas de la población. En su modalidad original, se ha venido aplicando en Argentina desde 1973, dos veces al año (mayo y octubre). Con un plan de incorporación progresiva, se han llegado a cubrir 31 aglomerados urbanos y un área urbano-rural. A partir de 2003, la Encuesta Permanente de Hogares (EPH) en Argentina se transformó en un relevamiento continuo que produce datos trimestrales para los 31 Aglomerados Urbanos.

Por tanto, se procede a levantar la base de datos correspondiente a la encuesta y realizar algunos cambios de etiquetado sobre variables relevantes para la visualización.

```{r}
eph <- read.table("bases/usu_individual_T424.txt",
                  header = TRUE,
                  sep = ";",
                  dec = ".")

eph <- eph %>% 
  mutate(MAS_500 = case_when(MAS_500 == "N" ~ "Menos de 500 mil",
                             MAS_500 == "S" ~ "500 mil y más"),
         sexo    = case_when(CH04 == 1 ~ "Varón",
                             CH04 == 2 ~ "Mujer"),
         NIVEL_ED = as.factor(NIVEL_ED))

```

Notar que el tipo de base es `.txr`, un formato no utilizado hasta el momento, pero muy habitual en las bases de datos provistas por el INDEC. En este sentido, un formato distinto requiere funciones distintas, para este caso se utilizó la función `read.table()`. Al mismo tiempo, es muy importante notar que este tipo de formatos no tienen estandarizados el tipo de separado entre una variable u otra, ni el signo de puntuación que diferencia el entero del decimal. Es por ello que se requiere utilizar los parámetros de la función para indicarle a R que signo separa una variable de otra y cuál el entero del decimal.

De este modo, `header = TRUE` nos indica que R muestre el título de cada columna (nombre de variable), `sep = ";"` es una indicación para que R interprete al punto y coma como un separador de variables, y por último `dec = "."` hace referencia a que las variables numéricas se separan entre enteros y decimales mediante puntos.

Ahora si, se procede a visualizar la información de la encuesta. Para trabajar con ella, siempre es recomendable contar con el [Diccionario de Registros](https://www.indec.gob.ar/ftp/cuadros/menusuperior/eph/EPH_registro_4T2024.pdf), el cual nos indicara a qué corresponde cada nombre de variable y que tipo de contenido yacen en estas.

A continuación se avanzará sobre la gráfica de frecuencias, utilizando el `geom_histogram()` para la visualización de un histograma.

```{r}
graf <- eph %>% 
  filter(P47T > 0,
         P21 > 0) 

perc_99 <- quantile(eph$P47T, probs = c(99/100), na.rm = TRUE)

ggplot(graf, aes(x = P47T, fill = MAS_500, weight = PONDII)) +
  geom_histogram(bins = 100) +
  scale_fill_brewer(palette = 9) +
  scale_x_continuous(limits = c(0, perc_99)) +
  theme_minimal() +
  labs(title= "Ingreso Total Individual según tamaño de aglomerado",
       subtitle = "4to trimestre 2024",
       caption = "Fuente: Encuesta Permanente de Hogares",
       x = "Ingreso Total Individual",
       y = "Casos",
       fill = "Aglomerado"
       )
  
```

Notar que se calculó el percentil 99 de la variable de ingresos y se filtro la escala del eje horizontal desde 0 hasta el percentil 99. También se utilizó una paleta de colores específicas con `scale_fill_brewer()`.

Si por ejemplo se busca observar la cantidad de personas por nivel educativo, de acuerdo al tamaño del aglomerado, puede usarse también un histograma pero agregando `facte_wrap()`. A saber, `facte_wrap()`es una función para crear múltiples gráficos (facetas) en una sola imagen, dividiendo los datos por una o más variables categóricas.

```{r}
ggplot(graf, aes(x = as.integer(NIVEL_ED), weight = PONDERA)) +
  geom_histogram(bins = 30, fill = "steelblue4") +
  facet_wrap(~ as.factor(MAS_500)) +
  theme_classic() +
  labs(title= "Nivel Educativo según tamaño de aglomerado",
       subtitle = "4to trimestre 2024",
       caption = "Fuente: Encuesta Permanente de Hogares",
       x = "Nivel Educativo",
       y = "Casos"
       
       )
```

## Visualizar la distribución y la densidad

Hasta aquí observamos gráficos vinculados a la frecuencia, ahora bien si queremos observar la distribucón, podemos emplear gráficos de caja o también de densidad.

En el último gráfico sobre ingresos se observa la dimensión de los ingresos totales individuales asociada a la geografía, si ahora por ejemplo buscamos visualizar algo que de cuenta del ingreso laboral en torno al nivel educativo, y al sexo, pueden emplearse gráficos de caja y hacer uso del atributo `facte_wrap()`.

```{r}
perc_99_p21 <-  quantile(eph$P21, probs = c(99/100), na.rm = TRUE)

ggplot(graf, aes(x= NIVEL_ED, y = P21, group = NIVEL_ED, fill = NIVEL_ED)) +
  geom_boxplot()+
  scale_fill_brewer(palette = 9) +
  scale_y_continuous(limits = c(0, perc_99_p21))+
  facet_wrap(~ sexo) +
  theme_minimal() + 
  labs(title= "Distribución Ingreso de la Ocupación Principal según sexo y nivel educativo",
       subtitle = "4to trimestre 2024",
       caption = "Fuente: Encuesta Permanente de Hogares",
       x = "",
       y = "",
       fill = "Nivel ed."
       ) 
```

En este caso se observan gráficos de caja para cada nivel educativo y a su vez separados según sexo, de modo tal que pueden compararse vis a vis los niveles de ingreso laboral entre distintos sexos teniendo en cuenta el nivel educativo.

Puede observarse algo similar, si nos enfocamos en la dimensión del sexo, pero analizando la distribución como densidad.

```{r}
trimestre <- "4to trimestre 2024"

cols <- c("#698B22", "#36648B")

ggplot(graf, aes(x = P21, fill = sexo, weight = PONDIIO)) +
  geom_density(alpha = 0.5, color = NA) +
  scale_fill_manual(values = cols) +
  theme_minimal() +
  scale_x_continuous(limits = c(0, perc_99_p21)) +
  labs(title= "Distribución Ingreso Ocupación Principal según sexo",
       subtitle = `trimestre`,
       caption = "Fuente: Encuesta Permanente de Hogares",
       x = "Ingreso Ocupación Principal",
       y = "",
       fill = "Sexo") + 
  theme(axis.text.y = element_blank())
```

Desde el punto de vista del código, notar que se han implementado dos complejidades extras. Por un lado, se creó un objeto llamado `trimestre`, el cual contiene la información realtiva a qué trimestre pertenece la información visualizada. De este modo, en el subtítulo se incluyó el contenido de dicho objeto, esto puede ser interesante de cara a automatizar una serie de procesos donde solo se cambie el nombre de las etiquetas en un momento inicial del script, y todas las visualizaciones se corran con la información contenida en los objetos correspondientes. A su vez, se creó el objeto `cols`, donde si indicaron dos colores que luego se le atribuyeron al gráfico. Algo también muy útil si se busca homogeizar la gama de colores de algún documento analítico.

### Complejización de la distribución: graficos de violin vs. boxplot

Un tipo de visualización cada vez más difundida en la estadística es la de gráficos de violin, haciendo referencia al instrumento de cuerda, los cuales permiten observar mejor las distribuciones que los gráficos de boxplot.

Por ejemplo, el siguiente gráfico de cajas está construido con el ingreso de la ocupación principal y discriminado por sexo.

```{r}
ggplot(graf, aes(y = P21, x = sexo, fill = sexo)) +
  geom_boxplot() +
  scale_y_continuous(limits = c(0, perc_99_p21)) +
  scale_fill_manual(values = cols) +
  theme_minimal() +
  labs(title = "Distribución del Ingreso Ocupación Principal según sexo",
       subtitle = `trimestre`,
       y = "Ingreso Ocupación Principal",
       x = "",
       fill = "Sexo",
       caption = "Fuente: Encuesta Permanente de Hogares"
       ) 
```

Se pueden observar las diferencias en torno al promedio y los valores más elevados que toma el percentil 50 a 75 de la muestra para los varones. Ahora bien, un gráfico de violin muestra esto en forma mucho más amigable a la vista. Por ejemplo:

```{r}
ggplot(graf, aes(y = P21, x = sexo, fill = sexo, weight = PONDIIO)) +
  geom_violin() +
  scale_y_continuous(limits = c(0, perc_99_p21)) +
  scale_fill_manual(values = cols) +
  theme_minimal() +
   labs(title = "Distribución del Ingreso Ocupación Principal según sexo",
       subtitle = `trimestre`,
       y = "Ingreso Ocupación Principal",
       x = "",
       fill = "Sexo",
       caption = "Fuente: Encuesta Permanente de Hogares"
       ) 
```

En este caso, se puede ver de forma mucho más clara el sesgo hacia valores bajos de la distribución del ingreso en mujeres. Si se observan ambos gráficos en conjunto, se arriba a la siguiente visualización comparada:

```{r}
ggplot(graf, aes(y = P21, x = sexo, fill = sexo)) +
  geom_violin() +
  scale_y_continuous(limits = c(0, perc_99_p21)) +
  scale_fill_manual(values = cols) +
  theme_minimal() +
  labs(title = "Distribución del Ingreso Ocupación Principal según sexo",
       subtitle = `trimestre`,
       y = "Ingreso Ocupación Principal",
       x = "",
       fill = "Sexo",
       caption = "Fuente: Encuesta Permanente de Hogares"
       ) +
  geom_boxplot(width = 0.2)
```

## Aplicación de R a páginas web e informes.

En el caso del [CEPED](https://www.economicas.uba.ar/investigacion/institutos-y-centros/ceped/), se desarrolló un sitio titulado [CEPED Data](https://ceped-data.shinyapps.io/ceped-data/), donde pueden encontrarse series históricas de tipo de cambio, salarios, empleo, activida económica, entre otras.

A su vez, diferentes análisis basados en R se han realizado también sobre encuestas que dan cuenta de las diferencias en el uso del tiempo en torno al género. Ecofeminita, por ejemplo, ha publicado [informes](https://ecofeminita.com/tiempo-libre/?v=5435c69ed3bc) en su [sitio web](https://ecofeminita.com/?v=c582dec943ff), donde tanto el sitio como los informes se encuentran desarrollados completamente en R.

## Recursos adicionales

Para quienes quieran profundizar en estos conceptos:

-   La clase pasada les hablamos un poco sobre números índice (y hoy seguimos trabajando sobre el índice de remuneraciones reales). Los números índices son en general una forma excelente de visualizar y son especialmente potentes para graficar múltiples series. Más sobre esto y otras cosas en estas dos excelentes entradas de blog: <https://www.storytellingwithdata.com/blog/2016/2/1/be-gone-dual-y-axis>, <https://www.datawrapper.de/blog/dualaxis>

-   QCBS R Workshop Series (2023). *Workshop 3: Introduction to data visualisation with ggplot2*. <https://r.qcbs.ca/workshop03/book-en/>

-   The R Graph Gallery. <https://r-graph-gallery.com/>

-   From data to viz. <https://www.data-to-viz.com/>

-   Dataviz Inspiration <https://www.dataviz-inspiration.com/>

## Bibliografía {.unnumbered}

```{=html}
<div id="refs" class="references csl-bib-body hanging-indent">

  <div id="ref-wickham2019" class="csl-entry">
    Wickham, H., &amp; Grolemund, G. (2023). <i>R for Data Science (2nd ed)</i>. O'Reilly Media.
  </div>

  <div id="ref-dataviz" class="csl-entry">
    DataViz Inspiration. (n.d.). RetrievedRecuperado de <a href="https://www.dataviz-inspiration.com/">https://www.dataviz-inspiration.com/</a>
  </div>

</div>
```
