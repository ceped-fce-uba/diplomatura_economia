---
title: "Práctica 2"
author: "Diplomatura PAEEC - UBA"
output-file: "Guia Practica 2" 
format:
  html:
    embed-resources: true
    code-fold: true
    code-summary: "Mostrar respuesta"
    code-tools: false
    toc: true
    toc-location: left
    toc-title: Índice
    theme:
      light: ../assets/practica_claro.scss
      dark: ../assets/practica_oscuro.scss
    fig-width: 8
    fig-height: 5
    fig-format: retina
    warning: false
    message: false
    echo: true
    output: false
execute:
  freeze: auto
editor: source
include-after-body: ../assets/footer.html
---

```{r}
#| echo: FALSE

knitr::opts_knit$set(root.dir = "../../Clase 2 - Intro a tidyverse/")
```

## 1. Funciones básicas de manipulación de datos

a)  Carguen e impriman la base `adam_smith.csv` de la carpeta bases para ver su contenido:

```{r}
library(readr) # ó library(tidyverse)

adam_smith <- read_csv("bases/adam_smith.csv")

adam_smith # ó print(adam_smith)
```

------------------------------------------------------------------------

b) Sólo necesitamos las filas sobre la producción en una única jornada de trabajo, el resto es redundante. Usen la función `filter()` para eliminar el resto de fila y sobreescriban el resultado en el dataframe.

::: {.callout-tip appearance="simple"}
## Tip
Para colocar pipes ` %>%` utilicen el atajo **Ctrl + Shift + M**
:::


```{r}
library(dplyr) # ó library(tidyverse)

adam_smith <- adam_smith %>%
  filter(dias_trabajo == 1)

# ó adam_smith <- adam_smith %>% filter(dias_trabajo == 1)
# porque usamos el enter por convenciones de estilo, por comodidad.
```

------------------------------------------------------------------------

c)  Bien podrían ser mujeres las trabajadoras del ejemplo de Adam Smith. Renombren la columna "trabajadores" a "trabajadoras" con la fórmula `rename(nuevo_nombre = viejo_nombre)` y sobreescriban.

```{r}
library(dplyr) # ó library(tidyverse)

adam_smith <- adam_smith %>%
  rename(trabajadoras = trabajadores)
```

------------------------------------------------------------------------

d)  Creen una nueva columna con la producción per cápita de alfileres.

```{r}
library(dplyr) # ó library(tidyverse)

adam_smith <- adam_smith %>%
  mutate(prod_per_cap = alfileres_producidos / trabajadoras)
```
------------------------------------------------------------------------

e)  Usando `select()`, quédense únicamente con las columnas de tipo de organización del trabajo y de producción de alfileres per cápita.

```{r}
library(dplyr) # ó library(tidyverse)

adam_smith <- adam_smith %>%
  select(organizacion_trabajo, prod_per_cap)
```

## 2. Joins

a) Carguen las bases *base_sipa.csv* y *ipc_ceped_data.csv* y vean su contenido con un `head()`y un `tail()` respectivamente.

```{r}
library(tidyverse)
library(readxl)

base_sipa <- read_csv("bases/base_sipa.csv")

base_ipc <- read_xlsx("bases/ipc_ceped_data.xlsx")

head(base_sipa)

tail(base_ipc)
```

b) Quédense solo con las filas de "Remuneración promedio - con estacionalidad" de la base_sipa.

```{r}
base_sipa <- base_sipa %>% filter(Variable == "Remuneración promedio - con estacionalidad")
```


c) Realicen un left_join. Pero, primero, renombren la columna del ipc que se llama "valor".

```{r}
base_ipc <- base_ipc %>% rename(ipc = valor)
  
datos_unidos <- base_sipa %>% 
  left_join(base_ipc, by = c("Periodo" = "fecha"))
```

d) Calculemos la remuneración real, ahora que juntamos ambas bases de datos (el 100 del IPC se encuentra enero del 2006).

```{r}
datos_unidos <- datos_unidos %>% mutate(remuneracion_real = Valor / ipc)

datos_unidos
```


## 3. Medidas de resumen

a) Usen la función `unique()` para ver qué regiones identifica esta base de datos y la función `table()` para ver cuántos países hay en cada una.

```{r}
library(readr)

gapminder_2000 <- read_csv("bases/gapminder_2000.csv")

gapminder_2000$region %>% unique()

table(gapminder_2000$region)
```


b)   Utilicen las funciones `filter()` para crear una base que sólo conserva las filas de países de América. Al final, usen `summary()` para ver algunas medidas de resumen.

```{r}
library(tidyverse)

america_2000 <- gapminder_2000 %>%
  filter(region == "America")

america_2000 %>% summary() # ó summary(america_2000)
```

c)  Parece que hay valores faltantes **(NA's)** en la columna de mortalidad infantil. Vean para qué países falta dicha información haciendo uso de la función `filter()` y `ìs.na()`.

```{r}
america_2000 %>% 
  filter(is.na(child_mortality))

# Sólo estamos observando, no sobreescribimos
```

d) Con `!` invierten los valores lógicos. Sobreescriban la base de países americanos con `!is.na()` para eliminar los países con valores faltantes en dicha columna.

```{r}
america_2000 <- america_2000 %>% 
  filter(!is.na(child_mortality))

# Acá sí sobreescribimos
```

e) Creen una tabla de resumen con los promedios poblacionales de cada continente para el último año disponible en la base de datos

```{r}
poblacion_por_region <- gapminder_2000 %>%
  group_by(region) %>%
  summarize(poblacion_media = mean(population))
```

f) Retomen la cadena anterior y ordenen los datos de mayor a menor

```{r}
# Acá una pista nomás: arrange(desc(COLUMNA))
```

# 4. Uno difícil: left_join() + group_by()

a) Carguen estas dos bases: **base_sipa_csv** y **regiones.csv**. Esta última es una aproximación a las regiones que define el INDEC.

b) Vamos a usar a continuación la variable "Asalariados registrados en el sector privado" de la base del SIPA (en miles). Filtren para desechar el resto y vean su contenido. (pueden ver todas las variables en la base con `unique(base_sipa$Variable)`). Filtren además las observaciones cuyo Periodo sea igual a 2015-01-01 (PISTA: usen `as.Date('2015-01-01')`)

c) Hagan un join entre la base de asalariados por provincia y la de regiones mediante la columna común de regiones. Recuerden que la estructura básica es: `resultado <- datos_principales %>% left_join(datos_secundarios, by = "columna_comun")` [Obviamente, lo correcto sería asignar ciertos partidos de la provincia de Buenos Aires a la región Gran Buenos Aires y el resto de la provincia a la región pampeana. Pero a los fines de este ejercicio nos sirve para practicar.]{.aside}

d) Si hicieron el join correctamente deberían encontrarse con que Tucumán tiene un NA (valor faltante, del inglés *Not Available*) en la nueva columna Region. ¿Por qué pasó esto? Comparen ambas bases para encontrar la respuesta (es importante que afinen el ojo a estos detalles).

e) Para terminar, agrupen los datos por región, calculen la suma de asalariados y multipliquen por mil (dado que la base estaba en miles), usando como operación de resumen `sum(Valor) * 1000`). Verán que Tucumán queda por su cuenta, agrupado como NA.

