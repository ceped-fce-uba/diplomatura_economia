---
title: "Clase 1 - Agregados monetarios y API BCRA"
subtitle: "Diplomatura Problemas Actuales de la Economía, el Empleo y el Comercio (CEPED FCE - UBA)"
author-title: "DOCENTES:" 
authors:
  - name: Ezequiel Monteforte
  - name: Juan Camilo Gutman
output-file: "Clase 1 - API BCRA" 
format:
  html:
    embed-resources: true
    code-tools: false
    code-copy: false
    toc: true
    toc-location: left
    theme: 
      light: ../assets/practica_claro.scss
      dark: ../assets/practica_oscuro.scss
    fig-width: 8
    fig-height: 5
    fig-format: retina
    warning: false
    message: false
    echo: true
execute:
  freeze: auto
editor: source
include-after-body: ../assets/footer.html
---

```{r}
#| echo: true

library(httr)       # para hacer las solicitudes a la API
library(jsonlite)   # para procesar el formato JSON
library(tidyverse)  # nuestro querido tidyverse
library(lubridate)  # para manejar fechas
library(ggthemes)   # para la estética de los gráficos
library(scales)     # para formatear las etiquetas de los gráficos

options(scipen=999) # para evitar la notación científica
```

```{r}
#| echo: false

library(gt)
```

# Acceso a datos del BCRA via API

En la práctica de hoy vamos a ver cómo acceder a datos del Banco Central de la República Argentina (BCRA) a través de su API.

### ¿Qué es una API?

API es una sigla que viene del inglés (Application Programming Interface) y significa `Interfaz de Programación de Aplicaciones`. Es un intermediario que nos permite comunicarnos con un sistema complejo sin necesidad de conocer todos los detalles de cómo funciona por dentro. Nosotros hacemos una "solicitud" (en inglés, request), y la API nos devuelve una "respuesta" (en inglés, response).

En resumen, una API es un conjunto de reglas y herramientas que permite que diferentes aplicaciones de software se comuniquen entre sí. Simplifica el acceso a datos y funcionalidades de otros sistemas de una manera estandarizada y segura.

#### Los datos y la web

Para trabajar con datos de la web, es fundamental entender cómo se comunican los programas entre sí. Acá es donde entran las **APIs** , que actúan como puentes que permiten que una aplicación solicite información de otra de manera estandarizada.

Al hacer una solicitud a una API nuestra aplicación envía una solicitud a un servidor. Si todo sale bien, el servidor nos devuelve los datos con un código de estado `200`, que es el "lenguaje" del servidor para decir "recibí tu solicitud y la pude completar con éxito". En cambio, si pedimos a un servidor algo que no existe entonces recibiremos como respuesta el famoso código de estado `404`, el cual ya es parte de la cultura general del internet.

Sin embargo, no solo importa recibir los datos, sino también la seguridad de la conexión. Para esto existen cosas como el protocolo **SSL**. Su propósito es asegurar la **autenticación** (que sepamos que nos estamos comunicando con el servidor real) y la **encriptación** (para que la comunicación sea privada y no pueda ser leída por terceros).

Todo esto para que sepan que nos vamos a ver forzados a desactivar la verificación, perdiendo la garantía de que estamos conectados a la fuente legítima y de que los datos no han sido alterados en el camino... 

## API del Banco Central de la República Argentina (BCRA)

El BCRA tiene varias APIs. A nosotros nos interesa la de `Estadísticas Monetarias`, cuyo manual está disponible en [Manual de API de Estadísticas monetarias](https://www.bcra.gob.ar/Catalogo/Content/files/pdf/principales-variables-v3.pdf)

En nuestro caso, nosotros vamos a realizarle solicitudes a la API del BCRA desde R ("dame los datos de las reservas internacionales"), y la API nos los va responder con un código de estado y los datos en un formato ordenado (JSON, que es una especie de diccionario muy utilizado), entre otras cosas que no nos interesan.


### Series disponibles

Primero, vam  scale_x_date(
    date_labels = "%d-%m-%y",
    date_breaks = "1 month"
  ) +os a ver qué series de datos están disponibles.

```{r}
#| output: false

url <- "https://api.bcra.gob.ar/estadisticas/v3.0/monetarias"

# Con la función GET del paquete httr realizamos la solicitud
response <- GET(url, config(ssl_verifypeer = FALSE))

# No se asusten con el JSON, simplemente es un diccionario
data <- fromJSON(content(response, "text"))

df <- data$results %>% 
  filter(categoria == 'Principales Variables')

df
```

```{r}
#| echo: false

df %>% 
  rename(ID = 1, `Descripción de la Serie` = 2) %>%
  gt() %>% 
  tab_header(
    title = "Series Monetarias Disponibles en la API del BCRA",
    subtitle = "Variables con su descripción, ID, fecha de dato más reciente y último valor"
  ) %>% 
  tab_options(
    column_labels.border.bottom.width= px(3)
  )
```

A continuación solicitamos algunas bases de datos y graficamos:
### Base Monetaria

Podemos, por ejemplo, graficar la base monetaria

```{r}
url_base_mon = "https://api.bcra.gob.ar/estadisticas/v3.0/monetarias/15"

response_base_mon <- GET(url_base_mon, config(ssl_verifypeer = FALSE))

data_base_mon <- fromJSON(content(response_base_mon, "text"))

df_base_mon <- data_base_mon$results
df_base_mon$fecha <- as.Date(df_base_mon$fecha)

df_base_mon <- df_base_mon %>% 
  filter(fecha >= as.Date("2024-06-30")) %>% 
  arrange(fecha) %>% 
  select(fecha, valor)

ggplot(df_base_mon, aes(x = fecha, y = valor)) +
  geom_line(color = "#F28E2B", size = 1.5) +
  theme_fivethirtyeight() +
  labs(
    title = "Base monetaria (último año)",
    subtitle = "Total (en millones de pesos)",
    caption = "Fuente: BCRA"
  ) +
  scale_y_continuous(labels = scales::label_dollar(
    prefix = "ARS ",
    suffix = " M",
    big.mark = ".",
    decimal.mark = ","
      ),
    breaks = scales::pretty_breaks(n = 6)
  ) +
  scale_x_date(
    date_labels = "%d-%m-%y",
    date_breaks = "1 month"
  ) +
  
  theme_fivethirtyeight()+
  
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 12),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  )

```

## Reservas Internacionales

Ahora, vamos a descargar y graficar los datos de las reservas internacionales. La url es la misma de antes pero termina en `/1`, porque esa es la ID de las Reservas Internacionales del BCRA.

```{r}
#| echo: true

url_reservas = "https://api.bcra.gob.ar/estadisticas/v3.0/monetarias/1"

response_reservas <- GET(url_reservas, config(ssl_verifypeer = FALSE))

data_reservas <- fromJSON(content(response_reservas, "text"))

df_reservas <- data_reservas$results
df_reservas$fecha <- as.Date(df_reservas$fecha)

df_reservas <- df_reservas %>% 
  filter(fecha >= as.Date("2023-06-30")) %>% 
  arrange(fecha) %>% 
  select(fecha, valor)

ggplot(df_reservas, aes(x = fecha, y = valor)) +
  geom_line(color = "#4E79A7", size = 1.5) +
  theme_fivethirtyeight() +
  labs(
    title = "Reservas BCRA (últimos dos años)",
    subtitle = "Reservas diarias en millones de dólares",
    caption = "Fuente: BCRA"
  ) +
  scale_y_continuous(labels = scales::label_dollar(
    prefix = "USD ",
    suffix = " M",
    big.mark = ".",
    decimal.mark = ","
      ),
    breaks = scales::pretty_breaks(n = 6)
  ) +
  scale_x_date(
    date_labels = "%d-%m-%y",
    date_breaks = "1 month"
  ) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 12),
    axis.title.x = element_blank(),
    axis.title.y = element_blank()
  )
```

## Circulación monetaria y Reservas

Combinemos varias series disponibles en la API para graficar la circulación monetaria en dólares junto con la serie de reservas que ya descargamos.

```{r}
url_circulacion = "https://api.bcra.gob.ar/estadisticas/v3.0/monetarias/16"

response_circulacion <- GET(url_circulacion, config(ssl_verifypeer = FALSE))

data_circulacion <- fromJSON(content(response_circulacion, "text"))

df_circulacion <- data_circulacion$results
df_circulacion$fecha <- as.Date(df_circulacion$fecha)

df_circulacion <- df_circulacion %>% 
  filter(fecha >= as.Date("2023-06-30")) %>% 
  arrange(fecha) %>% 
  select(fecha, circulacion = valor)

url_tc = "https://api.bcra.gob.ar/estadisticas/v3.0/monetarias/5"

response_tc <- GET(url_tc, config(ssl_verifypeer = FALSE))

data_tc <- fromJSON(content(response_tc, "text"))

df_tc <- data_tc$results
df_tc$fecha <- as.Date(df_tc$fecha)

df_tc <- df_tc %>% 
  filter(fecha >= as.Date("2023-06-30")) %>% 
  arrange(fecha) %>% 
  select(fecha, tc_mayorista = valor)

df_circ_tc <- left_join(df_circulacion, df_tc, by = "fecha")

df_circ_tc <- df_circ_tc %>% 
  mutate(circulacion_dolares = circulacion / tc_mayorista)

# Renombramos la columna valor de df_reservas para el join
df_reservas_renamed <- df_reservas %>%
  rename(reservas = valor)

# Unimos los dos dataframes
df_plot <- left_join(df_circ_tc, df_reservas_renamed, by = "fecha")

# Pasamos a formato long para ggplot
df_plot_long <- df_plot %>%
  select(fecha, `Circulación Monetaria` = circulacion_dolares, `Reservas` = reservas) %>%
  pivot_longer(cols = -fecha, names_to = "variable", values_to = "valor")
  
```

```{r}
ggplot(df_plot_long, aes(x = fecha, y = valor, color = variable)) +
  geom_line(size = 1.5) +
  theme_fivethirtyeight() +
  labs(
    title = "Circulación Monetaria y Reservas",
    subtitle = "En millones de dólares",
    caption = "Fuente: BCRA",
    color = ""
  ) +
  scale_y_continuous(
    labels = scales::label_dollar(
      prefix = "USD ",
      suffix = " M",
      big.mark = ".",
      decimal.mark = ","
      ),
    breaks = scales::pretty_breaks(n = 6)
  ) +
  scale_x_date(
    date_labels = "%d-%m-%y",
    date_breaks = "1 month"
  ) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 12),
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    legend.position = "top"
  ) +
  scale_color_manual(values = c("Circulación Monetaria" = "#4E79A7", "Reservas" = "#F28E2B"))
```

## Extra: programación funcional

Solo para quienes quieran ir un poco más allá, algo que no llegamos a ver en la diplomatura y que es extremadamente útil para procesamientos complejos es lo que se conoce como `programación funcional`. Se trata de un enfoque que consiste en construir funciones para reproducir comportamientos, mejorando la legibilidad, asegurando la funcionalidad esperada y eliminando código redundante.

En internet hay muchísimo material para aprender a utilizar funciones en R. 

```{r}
api_bcra <- function(id) {
  
  # Librerías necesarias
  library(httr)
  library(jsonlite)
  library(lubridate)
  
  # 1. Se construye la URL con el id provisto
  url <- paste0("https://api.bcra.gob.ar/estadisticas/v3.0/monetarias/", id)
  
  # 2. Solicitud GET a la API
  response <- GET(url, config(ssl_verifypeer = FALSE))

  # 3. Chequeo de código de estado
  if (status_code(response) != 200) {
    stop("La solicitud falló con código: ", status_code(response))
   }
  
  # 4. Extraemos los datos del JSON
  data <- fromJSON(content(response, "text"))

  # 5. Creamos el dataframe
  df <- data$results
  df$fecha <- as.Date(df$fecha)
  
  # 6. Estudien sobre programación funcional para entender qué hace el return
  return(df)
}
```

# Ahora, por ejemplo, así de fácil es pedir las reservas:

```{r}
prueba_función <- api_bcra(1)

head(prueba_función)
```

